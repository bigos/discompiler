XACQUIRE/XRELEASE — Hardware Lock Elision Prefix Hints

Opcode/
Instruction
64/32- bit CPUID Description
Mode Feature 
Support Flag 

F2
XACQUIRE
V/V HLE 
A hint used with an “XACQUIRE-enabled“ instruction to start lock
elision on the instruction memory operand address.

F3
XRELEASE
V/V HLE
A hint used with an “XRELEASE-enabled“ instruction to end lock
 elision on the instruction memory operand address.

NOTES:
1. Software is not required to check the HLE feature flag to use XACQUIRE or XRELEASE, as they are treated as regular prefix if HLE
feature flag reports 0.

Description
The XACQUIRE prefix is a hint to start lock elision on the memory address specified by the instruction and the
XRELEASE prefix is a hint to end lock elision on the memory address specified by the instruction.
The XACQUIRE prefix hint can only be used with the following instructions (these instructions are also referred to
as XACQUIRE-enabled when used with the XACQUIRE prefix):
• Instructions with an explicit LOCK prefix (F0H) prepended to forms of the instruction where the destination
   operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCHG8B, DEC, INC, NEG, NOT,
  OR, SBB, SUB, XOR, XADD, and XCHG.
• The XCHG instruction either with or without the presence of the LOCK prefix.
The XRELEASE prefix hint can only be used with the following instructions (also referred to as XRELEASE-enabled
when used with the XRELEASE prefix):
• Instructions with an explicit LOCK prefix (F0H) prepended to forms of the instruction where the destination
   operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCHG8B, DEC, INC, NEG, NOT,
  OR, SBB, SUB, XOR, XADD, and XCHG.
• The XCHG instruction either with or without the presence of the LOCK prefix.
  • 
The "MOV mem, reg" (Opcode 88H/89H) and "MOV mem, imm" (Opcode C6H/C7H) instructions. In these
cases, the XRELEASE is recognized without the presence of the LOCK prefix.
The lock variables must satisfy the guidelines described in Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1, Section 14.3.3, for elision to be successful, otherwise an HLE abort may be signaled.
If an encoded byte sequence that meets XACQUIRE/XRELEASE requirements includes both prefixes, then the HLE
semantic is determined by the prefix byte that is placed closest to the instruction opcode. For example, an F3F2C6
will not be treated as a XRELEASE-enabled instruction since the F2H (XACQUIRE) is closest to the instruction
opcode C6. Similarly, an F2F3F0 prefixed instruction will be treated as a XRELEASE-enabled instruction since F3H
(XRELEASE) is closest to the instruction opcode.

Intel 64 and IA-32 Compatibility
The effect of the XACQUIRE/XRELEASE prefix hint is the same in non-64-bit modes and in 64-bit mode.
For instructions that do not support the XACQUIRE hint, the presence of the F2H prefix behaves the same way as
prior hardware, according to
REPNE/REPNZ semantics for string instructions,
Serve as SIMD prefix for legacy SIMD instructions operating on XMM register
Cause #UD if prepending the VEX prefix.
Undefined for non-string instructions or other situations.
For instructions that do not support the XRELEASE hint, the presence of the F3H prefix behaves the same way as in
prior hardware, according to
REP/REPE/REPZ semantics for string instructions,
Serve as SIMD prefix for legacy SIMD instructions operating on XMM register
Cause #UD if prepending the VEX prefix.
Undefined for non-string instructions or other situations.
---------------------------------------------------------------------

XABORT — Transactional Abort

Opcode/ Instruction Op/ En
64/32bit Mode Support
CPUID Feature Flag
Description

C6 F8 ib 
XABORT imm8 
A V/V RTM
Causes an RTM abort if in RTM execution

Instruction Operand Encoding
Op/En Operand 1 Operand2 Operand3 Operand4
A imm8 NA NA NA

Description
XABORT forces an RTM abort. Following an RTM abort, the logical processor resumes execution at the fallback
address computed through the outermost XBEGIN instruction. The EAX register is updated to reflect an XABORT
instruction caused the abort, and the imm8 argument will be provided in bits 31:24 of EAX.

Operation
XABORT
IF RTM_ACTIVE = 0
THEN
Treat as NOP;
ELSE
GOTO RTM_ABORT_PROCESSING;
FI;
(* For any RTM abort condition encountered during RTM execution *)
RTM_ABORT_PROCESSING:
Restore architectural register state;
Discard memory updates performed in transaction;
Update EAX with status and XABORT argument;
RTM_NEST_COUNT ← 0;
RTM_ACTIVE ← 0;
IF 64-bit Mode
THEN
RIP ← fallbackRIP;
ELSE
EIP ← fallbackEIP;
FI;
END

Flags Affected
None
---------------------------------------------------------------------

XADD—Exchange and Add

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

0F C0 /r 
XADD r/m8, r8 
MR Valid Valid 
Exchange r8 and r/m8; load sum into r/m8.

REX + 0F C0 /r 
XADD r/m8, r8 
MR Valid N.E. 
Exchange r8 and r/m8; load sum into r/m8.

0F C1 /r 
XADD r/m16, r16 
MR Valid Valid 
Exchange r16 and r/m16; load sum into r/m16.

0F C1 /r 
XADD r/m32, r32 
MR Valid Valid 
Exchange r32 and r/m32; load sum into r/m32.

REX.W + 0F C1 /r 
XADD r/m64, r64 
MR Valid N.E. 
Exchange r64 and r/m64; load sum into r/m64.

NOTES:
* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
MR ModRM:r/m (r, w) ModRM:reg (W) NA NA

Description
Exchanges the first operand (destination operand) with the second operand (source operand), then loads the sum
of the two values into the destination operand. The destination operand can be a register or a memory location; the
source operand is a register.
In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits
access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See
the summary chart at the beginning of this section for encoding data and limits.
This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.

IA-32 Architecture Compatibility
IA-32 processors earlier than the Intel486 processor do not recognize this instruction. If this instruction is used,
you should provide an equivalent code sequence that runs on earlier processors.

Operation
TEMP ← SRC + DEST;
SRC ← DEST;
DEST ← TEMP;

Flags Affected
The CF, PF, AF, SF, ZF, and OF flags are set according to the result of the addition, which is stored in the destination
operand.
---------------------------------------------------------------------

XBEGIN — Transactional Begin

Opcode/
Instruction Op/
En
64/32bit Mode Support
CPUID 
Feature 
Flag 
Description

C7 F8 
XBEGIN rel16 
A V/V RTM 
Specifies the start of an RTM region. Provides a 16-bit relative
offset to compute the address of the fallback instruction address at
which execution resumes following an RTM abort.

C7 F8 
XBEGIN rel32 
A V/V RTM 
Specifies the start of an RTM region. Provides a 32-bit relative
offset to compute the address of the fallback instruction address at
 which execution resumes following an RTM abort.

Instruction Operand Encoding
Op/En Operand 1 Operand2 Operand3 Operand4
A Offset NA NA NA

Description
The XBEGIN instruction specifies the start of an RTM code region. If the logical processor was not already in trans-
actional execution, then the XBEGIN instruction causes the logical processor to transition into transactional execu-
tion. The XBEGIN instruction that transitions the logical processor into transactional execution is referred to as the
outermost XBEGIN instruction. The instruction also specifies a relative offset to compute the address of the fallback
code path following a transactional abort.
On an RTM abort, the logical processor discards all architectural register and memory updates performed during
the RTM execution and restores architectural state to that corresponding to the outermost XBEGIN instruction. The
fallback address following an abort is computed from the outermost XBEGIN instruction.
---------------------------------------------------------------------

XCHG—Exchange Register/Memory with Register

Opcode
Instruction
Op/
En
64-Bit
Mode
Compat/ Description
Leg Mode

90+rw 
XCHG AX, r16 
O Valid Valid 
Exchange r16 with AX.

90+rw 
XCHG r16, AX 
O Valid Valid 
Exchange AX with r16.

90+rd 
XCHG EAX, r32 
O Valid Valid 
Exchange r32 with EAX.

REX.W + 90+rd 
XCHG RAX, r64 
O Valid N.E. 
Exchange r64 with RAX.

90+rd 
XCHG r32, EAX 
O Valid Valid 
Exchange EAX with r32.

REX.W + 90+rd 
XCHG r64, RAX 
O Valid N.E. 
Exchange RAX with r64.

86 /r 
XCHG r/m8, r8 
MR Valid Valid 
Exchange r8 (byte register) with byte from
 r/m8.

REX + 86 /r 
XCHG r/m8, r8 
MR Valid N.E. 
Exchange r8 (byte register) with byte from
 r/m8.

86 /r 
XCHG r8, r/m8 
RM Valid Valid 
Exchange byte from r/m8 with r8 (byte
 register).

REX + 86 /r 
XCHG r8, r/m8 
RM Valid N.E. 
Exchange byte from r/m8 with r8 (byte
 register).

87 /r 
XCHG r/m16, r16 
MR Valid Valid 
Exchange r16 with word from r/m16.

87 /r 
XCHG r16, r/m16 
RM Valid Valid 
Exchange word from r/m16 with r16.

87 /r 
XCHG r/m32, r32 
MR Valid Valid 
Exchange r32 with doubleword from r/m32.

REX.W + 87 /r 
XCHG r/m64, r64 
MR Valid N.E. 
Exchange r64 with quadword from r/m64.

87 /r 
XCHG r32, r/m32 
RM Valid Valid 
Exchange doubleword from r/m32 with r32.

REX.W + 87 /r 
XCHG r64, r/m64 
RM Valid N.E. 
Exchange quadword from r/m64 with r64.

NOTES:
* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
O AX/EAX/RAX (r, w) opcode + rd (r, w) NA NA
O opcode + rd (r, w) AX/EAX/RAX (r, w) NA NA
MR ModRM:r/m (r, w) ModRM:reg (r) NA NA
RM ModRM:reg (w) ModRM:r/m (r) NA NA

Description
Exchanges the contents of the destination (first) and source (second) operands. The operands can be two general-
purpose registers or a register and a memory location. If a memory operand is referenced, the processor’s locking
protocol is automatically implemented for the duration of the exchange operation, regardless of the presence or
absence of the LOCK prefix or of the value of the IOPL. (See the LOCK prefix description in this chapter for more
information on the locking protocol.)
This instruction is useful for implementing semaphores or similar data structures for process synchronization. (See
“Bus Locking” in Chapter 8 of the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3A, for
more information on bus locking.)
The XCHG instruction can also be used instead of the BSWAP instruction for 16-bit operands.
In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits
access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See
the summary chart at the beginning of this section for encoding data and limits.

Operation
TEMP ← DEST;
DEST ← SRC;
SRC ← TEMP;

Flags Affected
None.
---------------------------------------------------------------------

XEND — Transactional End

Opcode/
Instruction Op/
En
64/32bit
Mode
Support
CPUID
Feature
Flag
Description

0F 01 D5 
XEND 
A V/V RTM
Specifies the end of an RTM code region.

Instruction Operand Encoding
Op/En Operand 1 Operand2 Operand3 Operand4
A NA NA NA NA

Description
The instruction marks the end of an RTM code region. If this corresponds to the outermost scope (that is, including
this XEND instruction, the number of XBEGIN instructions is the same as number of XEND instructions), the logical
processor will attempt to commit the logical processor state atomically. If the commit fails, the logical processor will
rollback all architectural register and memory updates performed during the RTM execution. The logical processor
will resume execution at the fallback address computed from the outermost XBEGIN instruction. The EAX register
is updated to reflect RTM abort information.
XEND executed outside a transactional region will cause a #GP (General Protection Fault).
---------------------------------------------------------------------

XGETBV—Get Value of Extended Control Register

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

0F 01 D0 
XGETBV 
NP Valid Valid
Reads an XCR specified by ECX into EDX:EAX.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
NP NA NA NA NA

Description
Reads the contents of the extended control register (XCR) specified in the ECX register into registers EDX:EAX. (On
processors that support the Intel 64 architecture, the high-order 32 bits of RCX are ignored.) The EDX register is
loaded with the high-order 32 bits of the XCR and the EAX register is loaded with the low-order 32 bits. (On proces-
sors that support the Intel 64 architecture, the high-order 32 bits of each of RAX and RDX are cleared.) If fewer
than 64 bits are implemented in the XCR being read, the values returned to EDX:EAX in unimplemented bit loca-
tions are undefined.
Specifying a reserved or unimplemented XCR in ECX causes a general protection exception.
Currently, only XCR0 (the XFEATURE_ENABLED_MASK register) is supported. Thus, all other values of ECX are
reserved and will cause a #GP(0).

Operation
EDX:EAX ← XCR[ECX];

Flags Affected
None.
---------------------------------------------------------------------

XLAT/XLATB—Table Look-up Translation

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

D7 
XLAT m8 
NP Valid Valid 
Set AL to memory byte DS:[(E)BX + unsigned AL].

D7 
XLATB 
NP Valid Valid 
Set AL to memory byte DS:[(E)BX + unsigned AL].

REX.W + D7 
XLATB 
NP Valid N.E. 
Set AL to memory byte [RBX + unsigned AL].

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
NP NA NA NA NA

Description
Locates a byte entry in a table in memory, using the contents of the AL register as a table index, then copies the
contents of the table entry back into the AL register. The index in the AL register is treated as an unsigned integer.
The XLAT and XLATB instructions get the base address of the table in memory from either the DS:EBX or the DS:BX
registers (depending on the address-size attribute of the instruction, 32 or 16, respectively). (The DS segment may
be overridden with a segment override prefix.)
At the assembly-code level, two forms of this instruction are allowed: the “explicit-operand” form and the “no-
operand” form. The explicit-operand form (specified with the XLAT mnemonic) allows the base address of the table
to be specified explicitly with a symbol. This explicit-operands form is provided to allow documentation; however,
note that the documentation provided by this form can be misleading. That is, the symbol does not have to specify
the correct base address. The base address is always specified by the DS:(E)BX registers, which must be loaded
correctly before the XLAT instruction is executed.
The no-operands form (XLATB) provides a “short form” of the XLAT instructions. Here also the processor assumes
that the DS:(E)BX registers contain the base address of the table.
In 64-bit mode, operation is similar to that in legacy or compatibility mode. AL is used to specify the table index
(the operand size is fixed at 8 bits). RBX, however, is used to specify the table’s base address. See the summary
chart at the beginning of this section for encoding data and limits.
---------------------------------------------------------------------
