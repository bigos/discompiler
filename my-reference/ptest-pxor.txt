PTEST- Logical Compare

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 38 17 /r 
PTEST xmm1, xmm2/m128 
RM V/V SSE4_1 
Set ZF if xmm2/m128 AND xmm1 result is all
 0s. Set CF if xmm2/m128 AND NOT xmm1
 result is all 0s.

VEX.128.66.0F38.WIG 17 /r 
VPTEST xmm1, xmm2/m128 
RM V/V AVX 
Set ZF and CF depending on bitwise AND and
 ANDN of sources.

VEX.256.66.0F38.WIG 17 /r 
VPTEST ymm1, ymm2/m256 
RM V/V AVX 
Set ZF and CF depending on bitwise AND and
 ANDN of sources.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r) ModRM:r/m (r) NA NA

Description
PTEST and VPTEST set the ZF flag if all bits in the result are 0 of the bitwise AND of the first source operand (first
operand) and the second source operand (second operand). VPTEST sets the CF flag if all bits in the result are 0 of
the bitwise AND of the second source operand (second operand) and the logical NOT of the destination operand.
The first source register is specified by the ModR/M reg field.
128-bit versions: The first source register is an XMM register. The second source register can be an XMM register
or a 128-bit memory location. The destination register is not modified.
VEX.256 encoded version: The first source register is a YMM register. The second source register can be a YMM
register or a 256-bit memory location. The destination register is not modified.
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.
---------------------------------------------------------------------

PUNPCKHBW/PUNPCKHWD/PUNPCKHDQ/PUNPCKHQDQ— Unpack High Data

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 68 /r 
PUNPCKHBW mm, mm/m64
RM V/V MMX 
Unpack and interleave high-order bytes from
 mm and mm/m64 into mm.

66 0F 68 /r
PUNPCKHBW xmm1, xmm2/m128
RM V/V SSE2 
Unpack and interleave high-order bytes from
 xmm1 and xmm2/m128 into xmm1.

0F 69 /r
PUNPCKHWD mm, mm/m64
RM V/V MMX 
Unpack and interleave high-order words from
 mm and mm/m64 into mm.

66 0F 69 /r
PUNPCKHWD xmm1, xmm2/m128
RM V/V SSE2 
Unpack and interleave high-order words from
 xmm1 and xmm2/m128 into xmm1.

0F 6A /r1
PUNPCKHDQ mm, mm/m64
RM V/V MMX 
Unpack and interleave high-order
 doublewords from mm and mm/m64 into mm.

66 0F 6A /r
PUNPCKHDQ xmm1, xmm2/m128
RM V/V SSE2 
Unpack and interleave high-order
 doublewords from xmm1 and xmm2/m128
 into xmm1.

66 0F 6D /r
PUNPCKHQDQ xmm1, xmm2/m128
RM V/V SSE2 
Unpack and interleave high-order quadwords
 from xmm1 and xmm2/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 68/r
VPUNPCKHBW xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Interleave high-order bytes from xmm2 and
 xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 69/r
VPUNPCKHWD xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Interleave high-order words from xmm2 and
 xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 6A/r
VPUNPCKHDQ xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Interleave high-order doublewords from
 xmm2 and xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 6D/r 
VPUNPCKHQDQ xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Interleave high-order quadword from xmm2
and xmm3/m128 into xmm1 register.

VEX.NDS.256.66.0F.WIG 68 /r 
VPUNPCKHBW ymm1, ymm2, ymm3/m256 
RVM V/V AVX2 
Interleave high-order bytes from ymm2 and
 ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 69 /r 
VPUNPCKHWD ymm1, ymm2, ymm3/m256 
RVM V/V AVX2 
Interleave high-order words from ymm2 and
 ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 6A /r 
VPUNPCKHDQ ymm1, ymm2, ymm3/m256 
RVM V/V AVX2 
Interleave high-order doublewords from
 ymm2 and ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 6D /r 
VPUNPCKHQDQ ymm1, ymm2, ymm3/m256 
RVM V/V AVX2 
Interleave high-order quadword from ymm2
 and ymm3/m256 into ymm1 register.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Unpacks and interleaves the high-order data elements (bytes, words, doublewords, or quadwords) of the destina-
tion operand (first operand) and source operand (second operand) into the destination operand. Figure 4-16 shows
the unpack operation for bytes in 64-bit operands. The low-order data elements are ignored.
---------------------------------------------------------------------

PUNPCKLBW/PUNPCKLWD/PUNPCKLDQ/PUNPCKLQDQ—Unpack Low Data

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 
0F 60 /r 
PUNPCKLBW mm, mm/m32
RM V/V MMX 
Interleave low-order bytes from mm and
 mm/m32 into mm.

66 0F 60 /r
PUNPCKLBW xmm1, xmm2/m128
RM V/V SSE2 
Interleave low-order bytes from xmm1 and
 xmm2/m128 into xmm1.

0F 61 /r
PUNPCKLWD mm, mm/m32
RM V/V MMX 
Interleave low-order words from mm and
 mm/m32 into mm.

66 0F 61 /r
PUNPCKLWD xmm1, xmm2/m128
RM V/V SSE2 
Interleave low-order words from xmm1 and
 xmm2/m128 into xmm1.

0F 62 /r1
PUNPCKLDQ mm, mm/m32
RM V/V MMX 
Interleave low-order doublewords from mm
 and mm/m32 into mm.

66 0F 62 /r
PUNPCKLDQ xmm1, xmm2/m128
RM V/V SSE2 
Interleave low-order doublewords from xmm1
 and xmm2/m128 into xmm1.

66 0F 6C /r
PUNPCKLQDQ xmm1, xmm2/m128
RM V/V SSE2 
Interleave low-order quadword from xmm1
 and xmm2/m128 into xmm1 register.

VEX.NDS.128.66.0F.WIG 60/r
VPUNPCKLBW xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Interleave low-order bytes from xmm2 and
 xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 61/r
VPUNPCKLWD xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Interleave low-order words from xmm2 and
 xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 62/r
VPUNPCKLDQ xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Interleave low-order doublewords from xmm2
 and xmm3/m128 into xmm1.

VEX.NDS.128.66.0F.WIG 6C/r
VPUNPCKLQDQ xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Interleave low-order quadword from xmm2
 and xmm3/m128 into xmm1 register.

VEX.NDS.256.66.0F.WIG 60 /r
VPUNPCKLBW ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Interleave low-order bytes from ymm2 and
 ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 61 /r
VPUNPCKLWD ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Interleave low-order words from ymm2 and
 ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 62 /r
VPUNPCKLDQ ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Interleave low-order doublewords from ymm2
 and ymm3/m256 into ymm1 register.

VEX.NDS.256.66.0F.WIG 6C /r
VPUNPCKLQDQ ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Interleave low-order quadword from ymm2
 and ymm3/m256 into ymm1 register.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Unpacks and interleaves the low-order data elements (bytes, words, doublewords, and quadwords) of the destina-
tion operand (first operand) and source operand (second operand) into the destination operand. (Figure 4-18
shows the unpack operation for bytes in 64-bit operands.). The high-order data elements are ignored.
---------------------------------------------------------------------

PUSH—Push Word, Doubleword or Quadword Onto the Stack

Opcode* Instruction Op/ 64-Bit Compat/ Description
                    En Mode Leg Mode

FF /6 
PUSH r/m16 
M Valid Valid 
Push r/m16.

FF /6 
PUSH r/m32 
M N.E. Valid 
Push r/m32.

FF /6 
PUSH r/m64 
M Valid N.E. 
Push r/m64.

50+rw 
PUSH r16 
O Valid Valid 
Push r16.

50+rd 
PUSH r32 
O N.E. Valid 
Push r32.

50+rd 
PUSH r64 
O Valid N.E. 
Push r64.

6A ib 
PUSH imm8 
I Valid Valid 
Push imm8.

68 iw 
PUSH imm16 
I Valid Valid 
Push imm16.

68 id 
PUSH imm32 
I Valid Valid 
Push imm32.

0E 
PUSH CS 
NP Invalid Valid 
Push CS.

16 
PUSH SS 
NP Invalid Valid 
Push SS.

1E 
PUSH DS 
NP Invalid Valid 
Push DS.

06 
PUSH ES 
NP Invalid Valid 
Push ES.

0F A0 
PUSH FS 
NP Valid Valid 
Push FS.

0F A8 
PUSH GS 
NP Valid Valid 
Push GS.

NOTES:
* See IA-32 Architecture Compatibility section below.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
M ModRM:r/m (r) NA NA NA
O opcode + rd (w) NA NA NA
I imm8/16/32 NA NA NA
NP NA NA NA NA

Description
Decrements the stack pointer and then stores the source operand on the top of the stack. Address and operand
sizes are determined and used as follows:
•
Address size. The D flag in the current code-segment descriptor determines the default address size; it may be
overridden by an instruction prefix (67H).
The address size is used only when referencing a source operand in memory.
•
Operand size. The D flag in the current code-segment descriptor determines the default operand size; it may
be overridden by instruction prefixes (66H or REX.W).
The operand size (16, 32, or 64 bits) determines the amount by which the stack pointer is decremented (2, 4
or 8).
If the source operand is an immediate and its size is less than the operand size, a sign-extended value is
pushed on the stack. If the source operand is a segment register (16 bits) and the operand size is greater
than 16 bits, a zero-extended value is pushed on the stack.
•
Stack-address size. Outside of 64-bit mode, the B flag in the current stack-segment descriptor determines the
size of the stack pointer (16 or 32 bits); in 64-bit mode, the size of the stack pointer is always 64 bits.
The stack-address size determines the width of the stack pointer when writing to the stack in memory and
when decrementing the stack pointer. (As stated above, the amount by which the stack pointer is
decremented is determined by the operand size.)
If the operand size is less than the stack-address size, the PUSH instruction may result in a misaligned stack
pointer (a stack pointer that is not aligned on a doubleword or quadword boundary).
The PUSH ESP instruction pushes the value of the ESP register as it existed before the instruction was executed. If
a PUSH instruction uses a memory operand in which the ESP register is used for computing the operand address,
the address of the operand is computed before the ESP register is decremented.
If the ESP or SP register is 1 when the PUSH instruction is executed in real-address mode, a stack-fault exception
(#SS) is generated (because the limit of the stack segment is violated). Its delivery encounters a second stack-
fault exception (for the same reason), causing generation of a double-fault exception (#DF). Delivery of the
double-fault exception encounters a third stack-fault exception, and the logical processor enters shutdown mode.
See the discussion of the double-fault exception in Chapter 6 of the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3A.

IA-32 Architecture Compatibility
For IA-32 processors from the Intel 286 on, the PUSH ESP instruction pushes the value of the ESP register as it
existed before the instruction was executed. (This is also true for Intel 64 architecture, real-address and virtual-
8086 modes of IA-32 architecture.) For the Intel® 8086 processor, the PUSH SP instruction pushes the new value
of the SP register (that is the value after it has been decremented by 2).
---------------------------------------------------------------------

PUSHA/PUSHAD—Push All General-Purpose Registers

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

60 
PUSHA 
NP Invalid Valid 
Push AX, CX, DX, BX, original SP, BP, SI, and DI.

60 
PUSHAD 
NP Invalid Valid 
Push EAX, ECX, EDX, EBX, original ESP, EBP,
 ESI, and EDI.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
NP NA NA NA NA

Description
Pushes the contents of the general-purpose registers onto the stack. The registers are stored on the stack in the
following order: EAX, ECX, EDX, EBX, ESP (original value), EBP, ESI, and EDI (if the current operand-size attribute
is 32) and AX, CX, DX, BX, SP (original value), BP, SI, and DI (if the operand-size attribute is 16). These instruc-
tions perform the reverse operation of the POPA/POPAD instructions. The value pushed for the ESP or SP register
is its value before prior to pushing the first register (see the “Operation” section below).
The PUSHA (push all) and PUSHAD (push all double) mnemonics reference the same opcode. The PUSHA instruc-
tion is intended for use when the operand-size attribute is 16 and the PUSHAD instruction for when the operand-
size attribute is 32. Some assemblers may force the operand size to 16 when PUSHA is used and to 32 when
PUSHAD is used. Others may treat these mnemonics as synonyms (PUSHA/PUSHAD) and use the current setting
of the operand-size attribute to determine the size of values to be pushed from the stack, regardless of the
mnemonic used.
In the real-address mode, if the ESP or SP register is 1, 3, or 5 when PUSHA/PUSHAD executes: an #SS exception
is generated but not delivered (the stack error reported prevents #SS delivery). Next, the processor generates a
#DF exception and enters a shutdown state as described in the #DF discussion in Chapter 6 of the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.
This instruction executes as described in compatibility mode and legacy mode. It is not valid in 64-bit mode.

Operation
IF 64-bit Mode
THEN #UD
FI;
IF OperandSize = 32 (* PUSHAD instruction *)
THEN
Temp ← (ESP);
Push(EAX);
Push(ECX);
Push(EDX);
Push(EBX);
Push(Temp);
Push(EBP);
Push(ESI);
Push(EDI);
ELSE (* OperandSize = 16, PUSHA instruction *)
Temp ← (SP);
Push(AX);
Push(CX);
Push(DX);
Push(BX);
Push(Temp);
Push(BP);
Push(SI);
Push(DI);
FI;

Flags Affected
None.
---------------------------------------------------------------------

PUSHF/PUSHFD—Push EFLAGS Register onto the Stack

Opcode Instruction Op/ 64-Bit Compat/ Description
                    En Mode Leg Mode

9C 
PUSHF 
NP Valid Valid 
Push lower 16 bits of EFLAGS.

9C 
PUSHFD 
NP N.E. Valid 
Push EFLAGS.

9C 
PUSHFQ 
NP Valid N.E. 
Push RFLAGS.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
NP NA NA NA NA

Description
Decrements the stack pointer by 4 (if the current operand-size attribute is 32) and pushes the entire contents of
the EFLAGS register onto the stack, or decrements the stack pointer by 2 (if the operand-size attribute is 16) and
pushes the lower 16 bits of the EFLAGS register (that is, the FLAGS register) onto the stack. These instructions
reverse the operation of the POPF/POPFD instructions.
When copying the entire EFLAGS register to the stack, the VM and RF flags (bits 16 and 17) are not copied; instead,
the values for these flags are cleared in the EFLAGS image stored on the stack. See Chapter 3 of the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 1, for more information about the EFLAGS register.
The PUSHF (push flags) and PUSHFD (push flags double) mnemonics reference the same opcode. The PUSHF
instruction is intended for use when the operand-size attribute is 16 and the PUSHFD instruction for when the
operand-size attribute is 32. Some assemblers may force the operand size to 16 when PUSHF is used and to 32
when PUSHFD is used. Others may treat these mnemonics as synonyms (PUSHF/PUSHFD) and use the current
setting of the operand-size attribute to determine the size of values to be pushed from the stack, regardless of the
mnemonic used.
In 64-bit mode, the instruction’s default operation is to decrement the stack pointer (RSP) by 8 and pushes RFLAGS
on the stack. 16-bit operation is supported using the operand size override prefix 66H. 32-bit operand size cannot
be encoded in this mode. When copying RFLAGS to the stack, the VM and RF flags (bits 16 and 17) are not copied;
instead, values for these flags are cleared in the RFLAGS image stored on the stack.
When in virtual-8086 mode and the I/O privilege level (IOPL) is less than 3, the PUSHF/PUSHFD instruction causes
a general protection exception (#GP).
In the real-address mode, if the ESP or SP register is 1 when PUSHF/PUSHFD instruction executes: an #SS excep-
tion is generated but not delivered (the stack error reported prevents #SS delivery). Next, the processor generates
a #DF exception and enters a shutdown state as described in the #DF discussion in Chapter 6 of the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Operation
IF (PE = 0) or (PE = 1 and ((VM = 0) or (VM = 1 and IOPL = 3)))
(* Real-Address Mode, Protected mode, or Virtual-8086 mode with IOPL equal to 3 *)
THEN
IF OperandSize = 32
THEN
push (EFLAGS AND 00FCFFFFH);
(* VM and RF EFLAG bits are cleared in image stored on the stack *)
ELSE
push (EFLAGS); (* Lower 16 bits only *)
FI;
ELSE IF 64-bit MODE (* In 64-bit Mode *)
IF OperandSize = 64
THEN
push (RFLAGS AND 00000000_00FCFFFFH);
(* VM and RF RFLAG bits are cleared in image stored on the stack; *)
ELSE
push (EFLAGS); (* Lower 16 bits only *)
FI;
ELSE (* In Virtual-8086 Mode with IOPL less than 3 *)
#GP(0); (* Trap to virtual-8086 monitor *)
FI;
Flags Affected
None.
---------------------------------------------------------------------

PXOR—Logical Exclusive OR

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F EF /r 
PXOR mm, mm/m64
RM V/V MMX 
Bitwise XOR of mm/m64 and mm.

66 0F EF /r
PXOR xmm1, xmm2/m128
RM V/V SSE2 
Bitwise XOR of xmm2/m128 and xmm1.

VEX.NDS.128.66.0F.WIG EF /r 
VPXOR xmm1, xmm2, xmm3/m128 
RVM V/V AVX 
Bitwise XOR of xmm3/m128 and xmm2.

VEX.NDS.256.66.0F.WIG EF /r 
VPXOR ymm1, ymm2, ymm3/m256 
RVM V/V AVX2 
Bitwise XOR of ymm3/m256 and ymm2.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a bitwise logical exclusive-OR (XOR) operation on the source operand (second operand) and the destina-
tion operand (first operand) and stores the result in the destination operand. Each bit of the result is 1 if the corre-
sponding bits of the two operands are different; each bit is 0 if the corresponding bits of the operands are the
same.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
Legacy SSE instructions: The source operand can be an MMX technology register or a 64-bit memory location. The
destination operand is an MMX technology register.
128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first
source operand and destination operands are XMM registers. Bits (VLMAX-1:128) of the corresponding YMM desti-
nation register remain unchanged.
VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first
source operand and destination operands are XMM registers. Bits (VLMAX-1:128) of the destination YMM register
are zeroed.
VEX.256 encoded version: The second source operand is an YMM register or a 256-bit memory location. The first
source operand and destination operands are YMM registers.
Note: VEX.L must be 0, otherwise instructions will #UD.

Operation
PXOR (128-bit Legacy SSE version)
DEST  DEST XOR SRC
DEST[VLMAX-1:128] (Unmodified)
VPXOR (VEX.128 encoded version)
DEST  SRC1 XOR SRC2
PXOR—Logical Exclusive OR
Vol. 2B 4-273INSTRUCTION SET REFERENCE, N-Z
DEST[VLMAX-1:128]  0
VPXOR (VEX.256 encoded version)
DEST  SRC1 XOR SRC2
---------------------------------------------------------------------

