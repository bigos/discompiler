TEST—Logical Compare

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

A8 ib 
TEST AL, imm8 
I Valid Valid 
AND imm8 with AL; set SF, ZF, PF according to
 result.

A9 iw 
TEST AX, imm16 
I Valid Valid 
AND imm16 with AX; set SF, ZF, PF according
 to result.

A9 id 
TEST EAX, imm32 
I Valid Valid 
AND imm32 with EAX; set SF, ZF, PF according
 to result.

REX.W + A9 id 
TEST RAX, imm32 
I Valid N.E. 
AND imm32 sign-extended to 64-bits with
 RAX; set SF, ZF, PF according to result.

F6 /0 ib 
TEST r/m8, imm8 
MI Valid Valid 
AND imm8 with r/m8; set SF, ZF, PF according
 to result.

REX + F6 /0 ib 
TEST r/m8, imm8 
MI Valid N.E. 
AND imm8 with r/m8; set SF, ZF, PF according
 to result.

F7 /0 iw 
TEST r/m16, imm16 
MI Valid Valid 
AND imm16 with r/m16; set SF, ZF, PF
 according to result.

F7 /0 id 
TEST r/m32, imm32 
MI Valid Valid 
AND imm32 with r/m32; set SF, ZF, PF
 according to result.


REX.W + F7 /0 id 
TEST r/m64, imm32 
MI Valid N.E. 
AND imm32 sign-extended to 64-bits with
 r/m64; set SF, ZF, PF according to result.

84 /r 
TEST r/m8, r8 
MR Valid Valid 
AND r8 with r/m8; set SF, ZF, PF according to
 result.

REX + 84 /r 
TEST r/m8, r8 
MR Valid N.E. 
AND r8 with r/m8; set SF, ZF, PF according to
 result.

85 /r 
TEST r/m16, r16 
MR Valid Valid 
AND r16 with r/m16; set SF, ZF, PF according
 to result.

85 /r 
TEST r/m32, r32 
MR Valid Valid 
AND r32 with r/m32; set SF, ZF, PF according
 to result.

REX.W + 85 /r 
TEST r/m64, r64 
MR Valid N.E. 
AND r64 with r/m64; set SF, ZF, PF according
 to result.

NOTES:
* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
I AL/AX/EAX/RAX imm8/16/32 NA NA
MI ModRM:r/m (r) imm8/16/32 NA NA
MR ModRM:r/m (r) ModRM:reg (r) NA NA

Description
Computes the bit-wise logical AND of first operand (source 1 operand) and the second operand (source 2 operand)
and sets the SF, ZF, and PF status flags according to the result. The result is then discarded.
In 64-bit mode, using a REX prefix in the form of REX.R permits access to additional registers (R8-R15). Using a
REX prefix in the form of REX.W promotes operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.

Operation
TEMP ← SRC1 AND SRC2;
SF ← MSB(TEMP);
IF TEMP = 0
THEN ZF ← 1;
ELSE ZF ← 0;
FI:
PF ← BitwiseXNOR(TEMP[0:7]);
CF ← 0;
OF ← 0;
(* AF is undefined *)

Flags Affected
The OF and CF flags are set to 0. The SF, ZF, and PF flags are set according to the result (see the “Operation”
section above). The state of the AF flag is undefined.
---------------------------------------------------------------------

TZCNT — Count the Number of Trailing Zero Bits

Opcode/ Op/
Instruction En
CPUID Description
Feature 
Flag 
64/32 
-bit 
Mode 

F3 0F BC /r 
TZCNT r16, r/m16 
RM V/V BMI1 
Count the number of trailing zero bits in r/m16, return result in r16.

F3 0F BC /r 
TZCNT r32, r/m32 
RM V/V BMI1 
Count the number of trailing zero bits in r/m32, return result in r32.

REX.W + F3 0F BC /r 
TZCNT r64, r/m64 
RM V/N.E. BMI1 
Count the number of trailing zero bits in r/m64, return result in r64.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (w) ModRM:r/m (r) NA NA

Description
TZCNT counts the number of trailing least significant zero bits in source operand (second operand) and returns the
result in destination operand (first operand). TZCNT is an extension of the BSF instruction. The key difference
between TZCNT and BSF instruction is that TZCNT provides operand size as output when source operand is zero
while in the case of BSF instruction, if source operand is zero, the content of destination operand are undefined. On
processors that do not support TZCNT, the instruction byte encoding is executed as BSF.
---------------------------------------------------------------------

UCOMISD—Unordered Compare Scalar Double-Precision Floating-Point Values and Set EFLAGS

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 2E /r 
UCOMISD xmm1, xmm2/m64
RM V/V SSE2 
Compares (unordered) the low double-
 precision floating-point values in xmm1 and
 xmm2/m64 and set the EFLAGS accordingly.

VEX.LIG.66.0F.WIG 2E /r
VUCOMISD xmm1, xmm2/m64
RM V/V AVX 
Compare low double precision floating-point
 values in xmm1 and xmm2/mem64 and set
 the EFLAGS flags accordingly.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r) ModRM:r/m (r) NA NA

Description
Performs an unordered compare of the double-precision floating-point values in the low quadwords of source
operand 1 (first operand) and source operand 2 (second operand), and sets the ZF, PF, and CF flags in the EFLAGS
register according to the result (unordered, greater than, less than, or equal). The OF, SF and AF flags in the
EFLAGS register are set to 0. The unordered result is returned if either source operand is a NaN (QNaN or SNaN).
The sign of zero is ignored for comparisons, so that –0.0 is equal to +0.0.
Source operand 1 is an XMM register; source operand 2 can be an XMM register or a 64 bit memory location.
The UCOMISD instruction differs from the COMISD instruction in that it signals a SIMD floating-point invalid oper-
ation exception (#I) only when a source operand is an SNaN. The COMISD instruction signals an invalid operation
exception if a source operand is either a QNaN or an SNaN.
The EFLAGS register is not updated if an unmasked SIMD floating-point exception is generated.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.

Operation
RESULT ← UnorderedCompare(SRC1[63:0] < > SRC2[63:0]) {
(* Set EFLAGS *)
CASE (RESULT) OF
UNORDERED:
ZF, PF, CF ← 111;
GREATER_THAN:
ZF, PF, CF ← 000;
LESS_THAN:
ZF, PF, CF ← 001;
EQUAL:
ZF, PF, CF ← 100;
ESAC;
OF, AF, SF ← 0;
---------------------------------------------------------------------

UCOMISS—Unordered Compare Scalar Single-Precision Floating-Point Values and Set EFLAGS

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 2E /r 
UCOMISS xmm1, xmm2/m32
RM V/V SSE 
Compare lower single-precision floating-point
 value in xmm1 register with lower single-
 precision floating-point value in xmm2/mem
 and set the status flags accordingly.

VEX.LIG.0F.WIG 2E /r
VUCOMISS xmm1, xmm2/m32
RM V/V AVX 
Compare low single precision floating-point
 values in xmm1 and xmm2/mem32 and set
 the EFLAGS flags accordingly.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r) ModRM:r/m (r) NA NA

Description
Performs an unordered compare of the single-precision floating-point values in the low doublewords of the source
operand 1 (first operand) and the source operand 2 (second operand), and sets the ZF, PF, and CF flags in the
EFLAGS register according to the result (unordered, greater than, less than, or equal). The OF, SF and AF flags in
the EFLAGS register are set to 0. The unordered result is returned if either source operand is a NaN (QNaN or
SNaN). The sign of zero is ignored for comparisons, so that –0.0 is equal to +0.0.
Source operand 1 is an XMM register; source operand 2 can be an XMM register or a 32 bit memory location.
The UCOMISS instruction differs from the COMISS instruction in that it signals a SIMD floating-point invalid opera-
tion exception (#I) only when a source operand is an SNaN. The COMISS instruction signals an invalid operation
exception if a source operand is either a QNaN or an SNaN.
The EFLAGS register is not updated if an unmasked SIMD floating-point exception is generated.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.
---------------------------------------------------------------------

UD2—Undefined Instruction

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

0F 0B 
UD2 
NP Valid Valid
Raise invalid opcode exception.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
NP NA NA NA NA

Description
Generates an invalid opcode exception. This instruction is provided for software testing to explicitly generate an
invalid opcode exception. The opcode for this instruction is reserved for this purpose.
Other than raising the invalid opcode exception, this instruction has no effect on processor state or memory.
Even though it is the execution of the UD2 instruction that causes the invalid opcode exception, the instruction
pointer saved by delivery of the exception references the UD2 instruction (and not the following instruction).
This instruction’s operation is the same in non-64-bit modes and 64-bit mode.

Operation
#UD (* Generates invalid opcode exception *);

Flags Affected
None.
---------------------------------------------------------------------

UNPCKHPD—Unpack and Interleave High Packed Double-Precision Floating-Point Values

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 15 /r 
UNPCKHPD xmm1, xmm2/m128
RM V/V SSE2 
Unpacks and Interleaves double-precision
 floating-point values from high quadwords of
 xmm1 and xmm2/m128.

VEX.NDS.128.66.0F.WIG 15 /r
VUNPCKHPD xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Unpacks and Interleaves double precision
 floating-point values from high quadwords of
 xmm2 and xmm3/m128.

VEX.NDS.256.66.0F.WIG 15 /r
VUNPCKHPD ymm1,ymm2, ymm3/m256
RVM V/V AVX 
Unpacks and Interleaves double precision
 floating-point values from high quadwords of
 ymm2 and ymm3/m256.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA
Description
Performs an interleaved unpack of the high double-precision floating-point values from the source operand (second
operand) and the destination operand (first operand). See Figure 4-23.
---------------------------------------------------------------------

UNPCKHPS—Unpack and Interleave High Packed Single-Precision Floating-Point Values

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 15 /r 
UNPCKHPS xmm1, xmm2/m128
RM V/V SSE 
Unpacks and Interleaves single-precision
 floating-point values from high quadwords of
 xmm1 and xmm2/mem into xmm1.

VEX.NDS.128.0F.WIG 15 /r
VUNPCKHPS xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Unpacks and Interleaves single-precision
 floating-point values from high quadwords of
 xmm2 and xmm3/m128.

VEX.NDS.256.0F.WIG 15 /r
VUNPCKHPS ymm1,ymm2,ymm3/m256
RVM V/V AVX
Unpacks and Interleaves single-precision
 floating-point values from high quadwords of
 ymm2 and ymm3/m256.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs an interleaved unpack of the high-order single-precision floating-point values from the source operand
(second operand) and the destination operand (first operand). See Figure 4-24. The source operand can be an
XMM register or a 128-bit memory location; the destination operand is an XMM register.
---------------------------------------------------------------------

UNPCKLPD—Unpack and Interleave Low Packed Double-Precision Floating-Point Values

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 14 /r 
UNPCKLPD xmm1, xmm2/m128
RM V/V SSE2 
Unpacks and Interleaves double-precision
 floating-point values from low quadwords of
 xmm1 and xmm2/m128.

VEX.NDS.128.66.0F.WIG 14 /r
VUNPCKLPD xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Unpacks and Interleaves double precision
 floating-point values low high quadwords of
 xmm2 and xmm3/m128.

VEX.NDS.256.66.0F.WIG 14 /r
VUNPCKLPD ymm1,ymm2, ymm3/m256
RVM V/V AVX 
Unpacks and Interleaves double precision
 floating-point values low high quadwords of
 ymm2 and ymm3/m256.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs an interleaved unpack of the low double-precision floating-point values from the source operand (second
operand) and the destination operand (first operand). See Figure 4-25. The source operand can be an XMM
register or a 128-bit memory location; the destination operand is an XMM register.
---------------------------------------------------------------------

UNPCKLPS—Unpack and Interleave Low Packed Single-Precision Floating-Point Values

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 14 /r 
UNPCKLPS xmm1, xmm2/m128
RM V/V SSE 
Unpacks and Interleaves single-precision
 floating-point values from low quadwords of
 xmm1 and xmm2/mem into xmm1.

VEX.NDS.128.0F.WIG 14 /r
VUNPCKLPS xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Unpacks and Interleaves single-precision
 floating-point values from low quadwords of
 xmm2 and xmm3/m128.

VEX.NDS.256.0F.WIG 14 /r
VUNPCKLPS ymm1,ymm2,ymm3/m256
RVM V/V AVX 
Unpacks and Interleaves single-precision
 floating-point values from low quadwords of
 ymm2 and ymm3/m256.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs an interleaved unpack of the low-order single-precision floating-point values from the source operand
(second operand) and the destination operand (first operand). See Figure 4-26. The source operand can be an
XMM register or a 128-bit memory location; the destination operand is an XMM register.
---------------------------------------------------------------------
