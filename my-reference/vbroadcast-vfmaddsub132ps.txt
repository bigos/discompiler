VBROADCAST—Broadcast Floating-Point Data

Opcode/ Op/ 64/32-bit CPUID Description
Instruction En Mode 
               Feature 
               Flag 

VEX.128.66.0F38.W0 18 /r 
VBROADCASTSS xmm1, m32
RM V/V AVX 
Broadcast single-precision floating-point
 element in mem to four locations in xmm1.
 
VEX.256.66.0F38.W0 18 /r
VBROADCASTSS ymm1, m32
RM V/V AVX 
Broadcast single-precision floating-point
 element in mem to eight locations in ymm1.
 
VEX.256.66.0F38.W0 19 /r
VBROADCASTSD ymm1, m64
RM V/V AVX 
Broadcast double-precision floating-point
 element in mem to four locations in ymm1.
 
VEX.256.66.0F38.W0 1A /r
VBROADCASTF128 ymm1, m128
RM V/V AVX 
Broadcast 128 bits of floating-point data in
 mem to low and high 128-bits in ymm1.
 
VEX.128.66.0F38.W0 18/r
VBROADCASTSS xmm1, xmm2
RM V/V AVX2 
Broadcast the low single-precision floating-
 point element in the source operand to four
 locations in xmm1.

VEX.256.66.0F38.W0 18 /r
VBROADCASTSS ymm1, xmm2
RM V/V AVX2 
Broadcast low single-precision floating-point
 element in the source operand to eight
 locations in ymm1.

VEX.256.66.0F38.W0 19 /r
VBROADCASTSD ymm1, xmm2
RM V/V AVX2 
Broadcast low double-precision floating-point
 element in the source operand to four
 locations in ymm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (w) ModRM:r/m (r) NA NA

Description
Load floating point values from the source operand (second operand) and broadcast to all elements of the destina-
tion operand (first operand).
VBROADCASTSD and VBROADCASTF128 are only supported as 256-bit wide versions. VBROADCASTSS is
supported in both 128-bit and 256-bit wide versions.
If CPUID.1:ECX.AVX[bit 28] =1, the destination operand is a YMM register. The source operand is either a 32-bit,
64-bit, or 128-bit memory location. Register source encodings are reserved and will #UD.
If CPUID.(EAX=07H, ECX=0H):EBX.AVX2[bit 5]=1, the destination operand is a YMM register. The source operand
is an XMM register, only the low 32-bit or 64-bit data element is used.
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b otherwise instructions will #UD. An
attempt to execute VBROADCASTSD or VBROADCASTF128 encoded with VEX.L= 0 will cause an #UD exception.
Attempts to execute any VBROADCAST* instruction with VEX.W = 1 will cause #UD.
---------------------------------------------------------------------

VCVTPH2PS—Convert 16-bit FP Values to Single-Precision FP Values

Opcode/ Op/ 64/32- CPUID Description
Instruction En bit Feature 
               Mode Flag 

VEX.256.66.0F38.W0 13 /r 
VCVTPH2PS ymm1, xmm2/m128
RM V/V F16C 
Convert eight packed half precision (16-bit)
 floating-point values in xmm2/m128 to packed
 single-precision floating-point value in ymm1.

VEX.128.66.0F38.W0 13 /r
VCVTPH2PS xmm1, xmm2/m64
RM V/V F16C 
Convert four packed half precision (16-bit)
 floating-point values in xmm2/m64 to packed
 single-precision floating-point value in xmm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (w) ModRM:r/m (r) NA NA

Description
Converts four/eight packed half precision (16-bits) floating-point values in the low-order 64/128 bits of an
XMM/YMM register or 64/128-bit memory location to four/eight packed single-precision floating-point values and
writes the converted values into the destination XMM/YMM register.
If case of a denormal operand, the correct normal result is returned. MXCSR.DAZ is ignored and is treated as if it
0. No denormal exception is reported on MXCSR.
128-bit version: The source operand is a XMM register or 64-bit memory location. The destination operand is a
XMM register. The upper bits (VLMAX-1:128) of the corresponding destination YMM register are zeroed.
256-bit version: The source operand is a XMM register or 128-bit memory location. The destination operand is a
YMM register.
The diagram below illustrates how data is converted from four packed half precision (in 64 bits) to four single
precision (in 128 bits) FP values.
Note: VEX.vvvv is reserved (must be 1111b).
---------------------------------------------------------------------

VCVTPS2PH—Convert Single-Precision FP value to 16-bit FP value

Opcode/ Op/ 64/32- CPUID Description
Instruction En bit Feature 
               Mode Flag 

VEX.256.66.0F3A.W0 1D /r ib 
VCVTPS2PH xmm1/m128, ymm2, imm8
MR V/V F16C 
Convert eight packed single-precision
 floating-point value in ymm2 to packed
 half-precision (16-bit) floating-point value
 in xmm1/mem. Imm8 provides rounding
 controls.

VEX.128.66.0F3A.W0.1D /r ib
VCVTPS2PH xmm1/m64, xmm2, imm8
MR V/V F16C 
Convert four packed single-precision float-
 ing-point value in xmm2 to packed half-
 precision (16-bit) floating-point value in
 xmm1/mem. Imm8 provides rounding con-
 trols.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
MR ModRM:r/m (w) ModRM:reg (r) NA NA

Description
Convert four or eight packed single-precision floating values in first source operand to four or eight packed half-
precision (16-bit) floating-point values. The rounding mode is specified using the immediate field (imm8).
Underflow results (i.e. tiny results) are converted to denormals. MXCSR.FTZ is ignored. If a source element is
denormal relative to input format with MXCSR.DAZ not set, DM masked and at least one of PM or UM unmasked; a
SIMD exception will be raised with DE, UE and PE set.
128-bit version: The source operand is a XMM register. The destination operand is a XMM register or 64-bit memory
location. The upper-bits vector register zeroing behavior of VEX prefix encoding still applies if the destination
operand is a xmm register. So the upper bits (255:64) of corresponding YMM register are zeroed.
256-bit version: The source operand is a YMM register. The destination operand is a XMM register or 128-bit
memory location. The upper-bits vector register zeroing behavior of VEX prefix encoding still applies if the destina-
tion operand is a xmm register. So the upper bits (255:128) of the corresponding YMM register are zeroed.
Note: VEX.vvvv is reserved (must be 1111b).
The diagram below illustrates how data is converted from four packed single precision (in 128 bits) to four half
precision (in 64 bits) FP values.
---------------------------------------------------------------------

VERR/VERW—Verify a Segment for Reading or Writing

Opcode Instruction Op/ 64-Bit Compat/ Description
                   En Mode Leg Mode

0F 00 /4 
VERR r/m16 
M Valid Valid 
Set ZF=1 if segment specified with r/m16 can
 be read.

0F 00 /5 
VERW r/m16 
M Valid Valid 
Set ZF=1 if segment specified with r/m16 can
 be written.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
M ModRM:r/m (r) NA NA NA

Description
Verifies whether the code or data segment specified with the source operand is readable (VERR) or writable (VERW)
from the current privilege level (CPL). The source operand is a 16-bit register or a memory location that contains
the segment selector for the segment to be verified. If the segment is accessible and readable (VERR) or writable
(VERW), the ZF flag is set; otherwise, the ZF flag is cleared. Code segments are never verified as writable. This
check cannot be performed on system segments.
To set the ZF flag, the following conditions must be met:
The segment selector is not NULL.
The selector must denote a descriptor within the bounds of the descriptor table (GDT or LDT).
The selector must denote the descriptor of a code or data segment (not that of a system segment or gate).
For the VERR instruction, the segment must be readable.
For the VERW instruction, the segment must be a writable data segment.
If the segment is not a conforming code segment, the segment’s DPL must be greater than or equal to (have
less or the same privilege as) both the CPL and the segment selector's RPL.
The validation performed is the same as is performed when a segment selector is loaded into the DS, ES, FS, or GS
register, and the indicated access (read or write) is performed. The segment selector's value cannot result in a
protection exception, enabling the software to anticipate possible segment access problems.
This instruction’s operation is the same in non-64-bit modes and 64-bit mode. The operand size is fixed at 16 bits.

Operation
IF SRC(Offset) > (GDTR(Limit) or (LDTR(Limit))
THEN ZF ← 0; FI;
Read segment descriptor;
IF SegmentDescriptor(DescriptorType) = 0 (* System segment *)
or (SegmentDescriptor(Type) ≠ conforming code segment)
and (CPL > DPL) or (RPL > DPL)
THEN
ZF ← 0;
ELSE
IF ((Instruction = VERR) and (Segment readable))
or ((Instruction = VERW) and (Segment writable))
THEN
ZF ← 1;
FI;
FI;

Flags Affected
The ZF flag is set to 1 if the segment is accessible and readable (VERR) or writable (VERW); otherwise, it is set to 0.
---------------------------------------------------------------------

VEXTRACTF128 — Extract Packed Floating-Point Values

Opcode/ Op/ 64/32-bit CPUID Description
Instruction En Mode 
               Feature 
               Flag 

VEX.256.66.0F3A.W0 19 /r ib 
VEXTRACTF128 xmm1/m128, ymm2, imm8
MR V/V AVX
Extract 128 bits of packed floating-point
 values from ymm2 and store results in
 xmm1/mem.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
MR ModRM:r/m (w) ModRM:reg (r) NA NA

Description
Extracts 128-bits of packed floating-point values from the source operand (second operand) at an 128-bit offset
from imm8[0] into the destination operand (first operand). The destination may be either an XMM register or an
128-bit memory location.
VEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.
The high 7 bits of the immediate are ignored.
If VEXTRACTF128 is encoded with VEX.L= 0, an attempt to execute the instruction encoded with VEX.L= 0 will
cause an #UD exception.

Operation
VEXTRACTF128 (memory destination form)
CASE (imm8[0]) OF
0: DEST[127:0]  SRC1[127:0]
1: DEST[127:0]  SRC1[255:128]
ESAC.
VEXTRACTF128 (register destination form)
CASE (imm8[0]) OF
0: DEST[127:0]  SRC1[127:0]
1: DEST[127:0]  SRC1[255:128]
ESAC.
DEST[VLMAX-1:128]  0
---------------------------------------------------------------------

VEXTRACTI128 — Extract packed Integer Values

Opcode/ Op/ 64/32-bit
Instruction En Mode
CPUID
Feature
Flag
Description

VEX.256.66.0F3A.W0 39 /r ib 
VEXTRACTI128 xmm1/m128, ymm2, imm8 
RMI V/V AVX2
Extract 128 bits of integer data from ymm2 and
store results in xmm1/mem.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RMI ModRM:r/m (w) ModRM:reg (r) Imm8 NA

Description
Extracts 128-bits of packed integer values from the source operand (second operand) at a 128-bit offset from
imm8[0] into the destination operand (first operand). The destination may be either an XMM register or a 128-bit
memory location.
VEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.
The high 7 bits of the immediate are ignored.
An attempt to execute VEXTRACTI128 encoded with VEX.L= 0 will cause an #UD exception.

Operation
VEXTRACTI128 (memory destination form)
CASE (imm8[0]) OF
0: DEST[127:0]  SRC1[127:0]
1: DEST[127:0]  SRC1[255:128]
ESAC.
VEXTRACTI128 (register destination form)
CASE (imm8[0]) OF
0: DEST[127:0]  SRC1[127:0]
1: DEST[127:0]  SRC1[255:128]
ESAC.
DEST[VLMAX-1:128]  0
---------------------------------------------------------------------

VFMADD132PD/VFMADD213PD/VFMADD231PD — Fused Multiply-Add of Packed Double-
Precision Floating-Point Values

Opcode/ Op/ 64/32- CPUID
Instruction En bit Mode 
Feature Flag
Description
                                                        
VEX.DDS.128.66.0F38.W1 98 /r 
VFMADD132PD xmm0, xmm1, xmm2/m128 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from xmm0 and xmm2/mem, add to xmm1 and
put result in xmm0.

VEX.DDS.128.66.0F38.W1 A8 /r 
VFMADD213PD xmm0, xmm1, xmm2/m128 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from xmm0 and xmm1, add to xmm2/mem and
put result in xmm0.

VEX.DDS.128.66.0F38.W1 B8 /r 
VFMADD231PD xmm0, xmm1, xmm2/m128 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from xmm1 and xmm2/mem, add to xmm0 and
put result in xmm0.


VEX.DDS.256.66.0F38.W1 98 /r 
VFMADD132PD ymm0, ymm1, ymm2/m256 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from ymm0 and ymm2/mem, add to ymm1 and
put result in ymm0.


VEX.DDS.256.66.0F38.W1 A8 /r 
VFMADD213PD ymm0, ymm1, ymm2/m256 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from ymm0 and ymm1, add to ymm2/mem and
put result in ymm0.

VEX.DDS.256.66.0F38.W1 B8 /r 
VFMADD231PD ymm0, ymm1, ymm2/m256 
A V/V FMA
Multiply packed double-precision floating-point val-
ues from ymm1 and ymm2/mem, add to ymm0 and
put result in ymm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a set of SIMD multiply-add computation on packed double-precision floating-point values using three
source operands and writes the multiply-add results in the destination operand. The destination operand is also the
first source operand. The second operand must be a SIMD register. The third source operand can be a SIMD
register or a memory location.
VFMADD132PD: Multiplies the two or four packed double-precision floating-point values from the first source
operand to the two or four packed double-precision floating-point values in the third source operand, adds the infi-
nite precision intermediate result to the two or four packed double-precision floating-point values in the second
source operand, performs rounding and stores the resulting two or four packed double-precision floating-point
values to the destination operand (first source operand).
VFMADD213PD: Multiplies the two or four packed double-precision floating-point values from the second source
operand to the two or four packed double-precision floating-point values in the first source operand, adds the infi-
nite precision intermediate result to the two or four packed double-precision floating-point values in the third
source operand, performs rounding and stores the resulting two or four packed double-precision floating-point
values to the destination operand (first source operand).
VFMADD231PD: Multiplies the two or four packed double-precision floating-point values from the second source to
the two or four packed double-precision floating-point values in the third source operand, adds the infinite precision
intermediate result to the two or four packed double-precision floating-point values in the first source operand,
performs rounding and stores the resulting two or four packed double-precision floating-point values to the desti-
nation operand (first source operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination
register are zeroed.
VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in
reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a
YMM register or a 256-bit memory location and encoded in rm_field.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------

VFMADD132PS/VFMADD213PS/VFMADD231PS — Fused Multiply-Add of Packed Single-
Precision Floating-Point Values

Opcode/ Op/
Instruction En
64/32
 CPUID 
  -bit Feature 
  Mode Flag 
Description

VEX.DDS.128.66.0F38.W0 98 /r 
VFMADD132PS xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed single-precision floating-point values
 from xmm0 and xmm2/mem, add to xmm1 and put
 result in xmm0.

VEX.DDS.128.66.0F38.W0 A8 /r 
VFMADD213PS xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed single-precision floating-point values
 from xmm0 and xmm1, add to xmm2/mem and put
 result in xmm0.

VEX.DDS.128.66.0F38.W0 B8 /r 
VFMADD231PS xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed single-precision floating-point values
 from xmm1 and xmm2/mem, add to xmm0 and put
 result in xmm0.

VEX.DDS.256.66.0F38.W0 98 /r 
VFMADD132PS ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed single-precision floating-point values
 from ymm0 and ymm2/mem, add to ymm1 and put
 result in ymm0.

VEX.DDS.256.66.0F38.W0 A8 /r 
VFMADD213PS ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed single-precision floating-point values
 from ymm0 and ymm1, add to ymm2/mem and put
 result in ymm0.

VEX.DDS.256.66.0F38.W0 B8 /r 
VFMADD231PS ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed single-precision floating-point values
 from ymm1 and ymm2/mem, add to ymm0 and put
 result in ymm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a set of SIMD multiply-add computation on packed single-precision floating-point values using three
source operands and writes the multiply-add results in the destination operand. The destination operand is also the
first source operand. The second operand must be a SIMD register. The third source operand can be a SIMD
register or a memory location.
VFMADD132PS: Multiplies the four or eight packed single-precision floating-point values from the first source
operand to the four or eight packed single-precision floating-point values in the third source operand, adds the infi-
nite precision intermediate result to the four or eight packed single-precision floating-point values in the second
source operand, performs rounding and stores the resulting four or eight packed single-precision floating-point
values to the destination operand (first source operand).
VFMADD213PS: Multiplies the four or eight packed single-precision floating-point values from the second source
operand to the four or eight packed single-precision floating-point values in the first source operand, adds the infi-
nite precision intermediate result to the four or eight packed single-precision floating-point values in the third
source operand, performs rounding and stores the resulting the four or eight packed single-precision floating-point
values to the destination operand (first source operand).
VFMADD231PS: Multiplies the four or eight packed single-precision floating-point values from the second source
operand to the four or eight packed single-precision floating-point values in the third source operand, adds the infi-
nite precision intermediate result to the four or eight packed single-precision floating-point values in the first
source operand, performs rounding and stores the resulting four or eight packed single-precision floating-point
values to the destination operand (first source operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination
register are zeroed.
VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in
reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a
YMM register or a 256-bit memory location and encoded in rm_field.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------

VFMADD132SD/VFMADD213SD/VFMADD231SD — Fused Multiply-Add of Scalar Double-
Precision Floating-Point Values

Opcode/ Op/ 64/32- CPUID
Instruction En bit Mode 
Feature Flag
Description
                                                        
VEX.DDS.LIG.128.66.0F38.W1 99 /r 
VFMADD132SD xmm0, xmm1, xmm2/m64 
A V/V FMA
Multiply scalar double-precision floating-point value
from xmm0 and xmm2/mem, add to xmm1 and put
result in xmm0.

VEX.DDS.LIG.128.66.0F38.W1 A9 /r 
VFMADD213SD xmm0, xmm1, xmm2/m64 
A V/V FMA
Multiply scalar double-precision floating-point value
from xmm0 and xmm1, add to xmm2/mem and put
result in xmm0.

VEX.DDS.LIG.128.66.0F38.W1 B9 /r 
VFMADD231SD xmm0, xmm1, xmm2/m64 
A V/V FMA
Multiply scalar double-precision floating-point value
from xmm1 and xmm2/mem, add to xmm0 and put
result in xmm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a SIMD multiply-add computation on the low packed double-precision floating-point values using three
source operands and writes the multiply-add result in the destination operand. The destination operand is also the
first source operand. The second operand must be a SIMD register. The third source operand can be a SIMD
register or a memory location.
VFMADD132SD: Multiplies the low packed double-precision floating-point value from the first source operand to
the low packed double-precision floating-point value in the third source operand, adds the infinite precision inter-
mediate result to the low packed double-precision floating-point values in the second source operand, performs
rounding and stores the resulting packed double-precision floating-point value to the destination operand (first
source operand).
VFMADD213SD: Multiplies the low packed double-precision floating-point value from the second source operand to
the low packed double-precision floating-point value in the first source operand, adds the infinite precision interme-
diate result to the low packed double-precision floating-point value in the third source operand, performs rounding
and stores the resulting packed double-precision floating-point value to the destination operand (first source
operand).
VFMADD231SD: Multiplies the low packed double-precision floating-point value from the second source to the low
packed double-precision floating-point value in the third source operand, adds the infinite precision intermediate
result to the low packed double-precision floating-point value in the first source operand, performs rounding and
stores the resulting packed double-precision floating-point value to the destination operand (first source operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 64-bit memory location and encoded in rm_field. The upper bits ([VLMAX-1:128]) of the YMM
destination register are zeroed.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------

VFMADD132SS/VFMADD213SS/VFMADD231SS — Fused Multiply-Add of Scalar Single-Precision
Floating-Point Values

Opcode/ Op/
Instruction En
64/32 CPUID 
-bit Feature 
Mode Flag 
Description

VEX.DDS.LIG.128.66.0F38.W0 99 /r 
VFMADD132SS xmm0, xmm1, xmm2/m32 
A V/V FMA 
Multiply scalar single-precision floating-point value
from xmm0 and xmm2/mem, add to xmm1 and put
result in xmm0.

VEX.DDS.LIG.128.66.0F38.W0 A9 /r 
VFMADD213SS xmm0, xmm1, xmm2/m32 
A V/V FMA 
Multiply scalar single-precision floating-point value
 from xmm0 and xmm1, add to xmm2/mem and put
 result in xmm0.

VEX.DDS.LIG.128.66.0F38.W0 B9 /r 
A V/V FMA 
Multiply scalar single-precision floating-point value
VFMADD231SS xmm0, xmm1, xmm2/m32 
 from xmm1 and xmm2/mem, add to xmm0 and put
 result in xmm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a SIMD multiply-add computation on packed single-precision floating-point values using three source
operands and writes the multiply-add results in the destination operand. The destination operand is also the first
source operand. The second operand must be a SIMD register. The third source operand can be a SIMD register or
a memory location.
VFMADD132SS: Multiplies the low packed single-precision floating-point value from the first source operand to the
low packed single-precision floating-point value in the third source operand, adds the infinite precision interme-
diate result to the low packed single-precision floating-point value in the second source operand, performs
rounding and stores the resulting packed single-precision floating-point value to the destination operand (first
source operand).
VFMADD213SS: Multiplies the low packed single-precision floating-point value from the second source operand to
the low packed single-precision floating-point value in the first source operand, adds the infinite precision interme-
diate result to the low packed single-precision floating-point value in the third source operand, performs rounding
and stores the resulting packed single-precision floating-point value to the destination operand (first source
operand).
VFMADD231SS: Multiplies the low packed single-precision floating-point value from the second source operand to
the low packed single-precision floating-point value in the third source operand, adds the infinite precision interme-
diate result to the low packed single-precision floating-point value in the first source operand, performs rounding
and stores the resulting packed single-precision floating-point value to the destination operand (first source
operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 32-bit memory location and encoded in rm_field. The upper bits ([VLMAX-1:128]) of the YMM
destination register are zeroed.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------

VFMADDSUB132PD/VFMADDSUB213PD/VFMADDSUB231PD — Fused Multiply-Alternating
Add/Subtract of Packed Double-Precision Floating-Point Values

Opcode/ Op/
Instruction En
64/32 
CPUID 
  -bit Feature 
  Mode Flag 
  Description

VEX.DDS.128.66.0F38.W1 96 /r 
VFMADDSUB132PD xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed double-precision floating-point
values from xmm0 and xmm2/mem, add/subtract
elements in xmm1 and put result in xmm0.

VEX.DDS.128.66.0F38.W1 A6 /r 
VFMADDSUB213PD xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed double-precision floating-point
 values from xmm0 and xmm1, add/subtract ele-
 ments in xmm2/mem and put result in xmm0.

VEX.DDS.128.66.0F38.W1 B6 /r 
VFMADDSUB231PD xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed double-precision floating-point
 values from xmm1 and xmm2/mem, add/subtract
 elements in xmm0 and put result in xmm0.

VEX.DDS.256.66.0F38.W1 96 /r 
VFMADDSUB132PD ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed double-precision floating-point
 values from ymm0 and ymm2/mem, add/subtract
 elements in ymm1 and put result in ymm0.

VEX.DDS.256.66.0F38.W1 A6 /r 
VFMADDSUB213PD ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed double-precision floating-point
 values from ymm0 and ymm1, add/subtract ele-
 ments in ymm2/mem and put result in ymm0.

VEX.DDS.256.66.0F38.W1 B6 /r 
VFMADDSUB231PD ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed double-precision floating-point
 values from ymm1 and ymm2/mem, add/subtract
 elements in ymm0 and put result in ymm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
VFMADDSUB132PD: Multiplies the two or four packed double-precision floating-point values from the first source
operand to the two or four packed double-precision floating-point values in the third source operand. From the infi-
nite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the even
double-precision floating-point values in the second source operand, performs rounding and stores the resulting
two or four packed double-precision floating-point values to the destination operand (first source operand).
VFMADDSUB213PD: Multiplies the two or four packed double-precision floating-point values from the second
source operand to the two or four packed double-precision floating-point values in the first source operand. From
the infinite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the
even double-precision floating-point values in the third source operand, performs rounding and stores the resulting
two or four packed double-precision floating-point values to the destination operand (first source operand).
VFMADDSUB231PD: Multiplies the two or four packed double-precision floating-point values from the second
source operand to the two or four packed double-precision floating-point values in the third source operand. From
the infinite precision intermediate result, adds the odd double-precision floating-point elements and subtracts the
even double-precision floating-point values in the first source operand, performs rounding and stores the resulting
two or four packed double-precision floating-point values to the destination operand (first source operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination
register are zeroed.
VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in
reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a
YMM register or a 256-bit memory location and encoded in rm_field.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------

VFMADDSUB132PS/VFMADDSUB213PS/VFMADDSUB231PS — Fused Multiply-Alternating
Add/Subtract of Packed Single-Precision Floating-Point Values

Opcode/ Op/
Instruction En
64/32 CPUID 
  -bit Feature 
  Mode Flag 
Description

VEX.DDS.128.66.0F38.W0 96 /r 
VFMADDSUB132PS xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed single-precision floating-point val-
 ues from xmm0 and xmm2/mem, add/subtract ele-
 ments in xmm1 and put result in xmm0.

VEX.DDS.128.66.0F38.W0 A6 /r 
VFMADDSUB213PS xmm0, xmm1, xmm2/m128 ues 
A V/V FMA 
Multiply packed single-precision floating-point val-
 from xmm0 and xmm1, add/subtract elements
 in xmm2/mem and put result in xmm0.

VEX.DDS.128.66.0F38.W0 B6 /r 
VFMADDSUB231PS xmm0, xmm1, xmm2/m128 
A V/V FMA 
Multiply packed single-precision floating-point val-
 ues from xmm1 and xmm2/mem, add/subtract ele-
 ments in xmm0 and put result in xmm0.

VEX.DDS.256.66.0F38.W0 96 /r 
VFMADDSUB132PS ymm0, ymm1, ymm2/m256 
A V/V FMA 
Multiply packed single-precision floating-point val-
 ues from ymm0 and ymm2/mem, add/subtract ele-
 ments in ymm1 and put result in ymm0.

VEX.DDS.256.66.0F38.W0 A6 /r 
VFMADDSUB213PS ymm0, ymm1, ymm2/m256
A V/V FMA 
Multiply packed single-precision floating-point val-
 ues from ymm0 and ymm1, add/subtract elements
 in ymm2/mem and put result in ymm0.

VEX.DDS.256.66.0F38.W0 B6 /r 
VFMADDSUB231PS ymm0, ymm1, ymm2/m256
A V/V FMA 
Multiply packed single-precision floating-point val-
 ues from ymm1 and ymm2/mem, add/subtract ele-
 ments in ymm0 and put result in ymm0.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
A ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
VFMADDSUB132PS: Multiplies the four or eight packed single-precision floating-point values from the first source
operand to the four or eight packed single-precision floating-point values in the third source operand. From the infi-
nite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the even
single-precision floating-point values in the second source operand, performs rounding and stores the resulting
four or eight packed single-precision floating-point values to the destination operand (first source operand).
VFMADDSUB213PS: Multiplies the four or eight packed single-precision floating-point values from the second
source operand to the four or eight packed single-precision floating-point values in the first source operand. From
the infinite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the
even single-precision floating-point values in the third source operand, performs rounding and stores the resulting
four or eight packed single-precision floating-point values to the destination operand (first source operand).
VFMADDSUB231PS: Multiplies the four or eight packed single-precision floating-point values from the second
source operand to the four or eight packed single-precision floating-point values in the third source operand. From
the infinite precision intermediate result, adds the odd single-precision floating-point elements and subtracts the
even single-precision floating-point values in the first source operand, performs rounding and stores the resulting
four or eight packed single-precision floating-point values to the destination operand (first source operand).
VEX.128 encoded version: The destination operand (also first source operand) is a XMM register and encoded in
reg_field. The second source operand is a XMM register and encoded in VEX.vvvv. The third source operand is a
XMM register or a 128-bit memory location and encoded in rm_field. The upper 128 bits of the YMM destination
register are zeroed.
VEX.256 encoded version: The destination operand (also first source operand) is a YMM register and encoded in
reg_field. The second source operand is a YMM register and encoded in VEX.vvvv. The third source operand is a
YMM register or a 256-bit memory location and encoded in rm_field.
Compiler tools may optionally support a complementary mnemonic for each instruction mnemonic listed in the
opcode/instruction column of the summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction mnemonic defined in the opcode/instruction
column. See also Section 2.3.1, “FMA Instruction Operand Order and Arithmetic Behavior”.
---------------------------------------------------------------------
