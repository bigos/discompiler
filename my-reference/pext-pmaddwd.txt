95
PEXT — Parallel Bits Extract

Opcode/ Op/
Instruction En
64/32 CPUID
    -bit Feature
    Mode Flag
    Description

VEX.NDS.LZ.F3.0F38.W0 F5 /r 
PEXT r32a, r32b, r/m32 
RVM V/V BMI2
Parallel extract of bits from r32b using mask in r/m32, result is written to r32a.

VEX.NDS.LZ.F3.0F38.W1 F5 /r 
PEXT r64a, r64b, r/m64 
RVM V/N.E. BMI2
Parallel extract of bits from r64b using mask in r/m64, result is writ-
ten to r64a.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
PEXT uses a mask in the second source operand (the third operand) to transfer either contiguous or non-contig-
uous bits in the first source operand (the second operand) to contiguous low order bit positions in the destination
(the first operand). For each bit set in the MASK, PEXT extracts the corresponding bits from the first source
operand and writes them into contiguous lower bits of destination operand. The remaining upper bits of destination
are zeroed.
---------------------------------------------------------------------

97
PEXTRB/PEXTRD/PEXTRQ — Extract Byte/Dword/Qword

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 3A 14 /r ib 
PEXTRB reg/m8, xmm2, imm8 
MRI V/V SSE4_1 
Extract a byte integer value from xmm2 at the
source byte offset specified by imm8 into reg
or m8. The upper bits of r32 or r64 are zeroed.

66 0F 3A 16 /r ib 
PEXTRD r/m32, xmm2, imm8 
MRI V/V SSE4_1 
Extract a dword integer value from xmm2 at
the source dword offset specified by imm8
into r/m32.

66 REX.W 0F 3A 16 /r ib 
PEXTRQ r/m64, xmm2, imm8 
MRI V/N.E. SSE4_1 
Extract a qword integer value from xmm2 at
the source qword offset specified by imm8
into r/m64.

VEX.128.66.0F3A.W0 14 /r ib 
VPEXTRB reg/m8, xmm2, imm8 
MRI V/V AVX 
Extract a byte integer value from xmm2 at the
 source byte offset specified by imm8 into reg
 or m8. The upper bits of r64/r32 is filled with
 zeros.

VEX.128.66.0F3A.W0 16 /r ib 
VPEXTRD r32/m32, xmm2, imm8 
MRI V/V AVX 
Extract a dword integer value from xmm2 at
 the source dword offset specified by imm8
 into r32/m32.

VEX.128.66.0F3A.W1 16 /r ib 
VPEXTRQ r64/m64, xmm2, imm8 
MRI V/i AVX 
Extract a qword integer value from xmm2 at
 the source dword offset specified by imm8
 into r64/m64.

NOTES:
1. In 64-bit mode, VEX.W1 is ignored for VPEXTRB (similar to legacy REX.W=1 prefix in PEXTRB).

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
MRI ModRM:r/m (w) ModRM:reg (r) imm8 NA

Description
Extract a byte/dword/qword integer value from the source XMM register at a byte/dword/qword offset determined
from imm8[3:0]. The destination can be a register or byte/dword/qword memory location. If the destination is a
register, the upper bits of the register are zero extended.
In legacy non-VEX encoded version and if the destination operand is a register, the default operand size in 64-bit
mode for PEXTRB/PEXTRD is 64 bits, the bits above the least significant byte/dword data are filled with zeros.
PEXTRQ is not encodable in non-64-bit modes and requires REX.W in 64-bit mode.
Note: In VEX.128 encoded versions, VEX.vvvv is reserved and must be 1111b, VEX.L must be 0, otherwise the
instruction will #UD. If the destination operand is a register, the default operand size in 64-bit mode for
VPEXTRB/VPEXTRD is 64 bits, the bits above the least significant byte/word/dword data are filled with zeros.
Attempt to execute VPEXTRQ in non-64-bit mode will cause #UD.
---------------------------------------------------------------------

100
PEXTRW—Extract Word

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F C5 /r ib1 
PEXTRW reg, mm, imm8
RMI V/V SSE 
Extract the word specified by imm8 from mm
 and move it to reg, bits 15-0. The upper bits of
 r32 or r64 is zeroed.

66 0F C5 /r ib
PEXTRW reg, xmm, imm8
RMI V/V SSE2 
Extract the word specified by imm8 from xmm
 and move it to reg, bits 15-0. The upper bits of
 r32 or r64 is zeroed.

66 0F 3A 15 /r ib 
PEXTRW reg/m16, xmm, imm8 
MRI V/V SSE4_1 
Extract the word specified by imm8 from xmm
and copy it to lowest 16 bits of reg or m16.
Zero-extend the result in the destination, r32
 or r64.

VEX.128.66.0F.W0 C5 /r ib 
VPEXTRW reg, xmm1, imm8 
RMI V/V AVX 
Extract the word specified by imm8 from
xmm1 and move it to reg, bits 15:0. Zero-
 extend the result. The upper bits of r64/r32 is
 filled with zeros.

VEX.128.66.0F3A.W0 15 /r ib 
VPEXTRW reg/m16, xmm2, imm8 
MRI V/V AVX 
Extract a word integer value from xmm2 at
the source word offset specified by imm8 into
 reg or m16. The upper bits of r64/r32 is filled
 with zeros.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.
2. In 64-bit mode, VEX.W1 is ignored for VPEXTRW (similar to legacy REX.W=1 prefix in PEXTRW).

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RMI ModRM:reg (w) ModRM:r/m (r) imm8 NA
MRI ModRM:r/m (w) ModRM:reg (r) imm8 NA

Description
Copies the word in the source operand (second operand) specified by the count operand (third operand) to the
destination operand (first operand). The source operand can be an MMX technology register or an XMM register.
The destination operand can be the low word of a general-purpose register or a 16-bit memory address. The count
operand is an 8-bit immediate. When specifying a word location in an MMX technology register, the 2 least-signifi-
cant bits of the count operand specify the location; for an XMM register, the 3 least-significant bits specify the loca-
tion. The content of the destination register above bit 16 is cleared (set to all 0s).
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15, R8-15). If the destination operand is a general-purpose register, the default operand size is 64-bits
in 64-bit mode.
Note: In VEX.128 encoded versions, VEX.vvvv is reserved and must be 1111b, VEX.L must be 0, otherwise the
instruction will #UD. If the destination operand is a register, the default operand size in 64-bit mode for VPEXTRW
is 64 bits, the bits above the least significant byte/word/dword data are filled with zeros.
---------------------------------------------------------------------

103
PHADDW/PHADDD — Packed Horizontal Add

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 38 01 /r 
PHADDW mm1, mm2/m64
RM V/V SSSE3 
Add 16-bit integers horizontally, pack to mm1.

66 0F 38 01 /r
PHADDW xmm1, xmm2/m128
RM V/V SSSE3 
Add 16-bit integers horizontally, pack to
 xmm1.

0F 38 02 /r
PHADDD mm1, mm2/m64
RM V/V SSSE3 
Add 32-bit integers horizontally, pack to mm1.

66 0F 38 02 /r
PHADDD xmm1, xmm2/m128
RM V/V SSSE3 
Add 32-bit integers horizontally, pack to
 xmm1.

VEX.NDS.128.66.0F38.WIG 01 /r
VPHADDW xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Add 16-bit integers horizontally, pack to
 xmm1.

VEX.NDS.128.66.0F38.WIG 02 /r
VPHADDD xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Add 32-bit integers horizontally, pack to
 xmm1.

VEX.NDS.256.66.0F38.WIG 01 /r
VPHADDW ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Add 16-bit signed integers horizontally, pack
 to ymm1.

VEX.NDS.256.66.0F38.WIG 02 /r
VPHADDD ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Add 32-bit signed integers horizontally, pack
 to ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
(V)PHADDW adds two adjacent 16-bit signed integers horizontally from the source and destination operands and
packs the 16-bit signed results to the destination operand (first operand). (V)PHADDD adds two adjacent 32-bit
signed integers horizontally from the source and destination operands and packs the 32-bit signed results to the
destination operand (first operand). When the source operand is a 128-bit memory operand, the operand must be
aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated.
Note that these instructions can operate on either unsigned or signed (two’s complement notation) integers;
however, it does not set bits in the EFLAGS register to indicate overflow and/or a carry. To prevent undetected
overflow conditions, software must control the ranges of the values operated on.
Legacy SSE instructions: Both operands can be MMX registers. The second source operand can be an MMX register
or a 64-bit memory location.
128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source
operand can be an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the corresponding YMM
destination register remain unchanged.
In 64-bit mode, use the REX prefix to access additional registers.
---------------------------------------------------------------------

107
PHADDSW — Packed Horizontal Add and Saturate

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 38 03 /r 
PHADDSW mm1, mm2/m64
RM V/V SSSE3 
Add 16-bit signed integers horizontally, pack
 saturated integers to mm1.

66 0F 38 03 /r
PHADDSW xmm1, xmm2/m128
RM V/V SSSE3 
Add 16-bit signed integers horizontally, pack
 saturated integers to xmm1.

VEX.NDS.128.66.0F38.WIG 03 /r
VPHADDSW xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Add 16-bit signed integers horizontally, pack
 saturated integers to xmm1.

VEX.NDS.256.66.0F38.WIG 03 /r
VPHADDSW ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Add 16-bit signed integers horizontally, pack
 saturated integers to ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
(V)PHADDSW adds two adjacent signed 16-bit integers horizontally from the source and destination operands and
saturates the signed results; packs the signed, saturated 16-bit results to the destination operand (first operand)
When the source operand is a 128-bit memory operand, the operand must be aligned on a 16-byte boundary or a
general-protection exception (#GP) will be generated.
Legacy SSE version: Both operands can be MMX registers. The second source operand can be an MMX register or
a 64-bit memory location.
128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the corresponding YMM destina-
tion register remain unchanged.
In 64-bit mode, use the REX prefix to access additional registers.
VEX.128 encoded version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the destination YMM register are
zeroed.
VEX.256 encoded version: The first source and destination operands are YMM registers. The second source
operand can be an YMM register or a 256-bit memory location.
Note: VEX.L must be 0, otherwise the instruction will #UD.
---------------------------------------------------------------------

109
PHMINPOSUW — Packed Horizontal Word Minimum

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 38 41 /r 
PHMINPOSUW xmm1, xmm2/m128 
RM V/V SSE4_1 
Find the minimum unsigned word in
 xmm2/m128 and place its value in the low
 word of xmm1 and its index in the second-
 lowest word of xmm1.

VEX.128.66.0F38.WIG 41 /r 
VPHMINPOSUW xmm1, xmm2/m128 
RM V/V AVX 
Find the minimum unsigned word in
 xmm2/m128 and place its value in the low
 word of xmm1 and its index in the second-
 lowest word of xmm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (w) ModRM:r/m (r) NA NA

Description
Determine the minimum unsigned word value in the source operand (second operand) and place the unsigned
word in the low word (bits 0-15) of the destination operand (first operand). The word index of the minimum value
is stored in bits 16-18 of the destination operand. The remaining upper bits of the destination are set to zero.
128-bit Legacy SSE version: Bits (VLMAX-1:128) of the corresponding YMM destination register remain
unchanged.
VEX.128 encoded version: Bits (VLMAX-1:128) of the destination YMM register are zeroed. VEX.vvvv is reserved
and must be 1111b, VEX.L must be 0, otherwise the instruction will #UD.
---------------------------------------------------------------------

111
PHSUBW/PHSUBD — Packed Horizontal Subtract

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 38 05 /r 
PHSUBW mm1, mm2/m64
RM V/V SSSE3 
Subtract 16-bit signed integers horizontally,
 pack to mm1.

66 0F 38 05 /r
PHSUBW xmm1, xmm2/m128
RM V/V SSSE3 
Subtract 16-bit signed integers horizontally,
 pack to xmm1.

0F 38 06 /r
PHSUBD mm1, mm2/m64
RM V/V SSSE3 
Subtract 32-bit signed integers horizontally,
 pack to mm1.

66 0F 38 06 /r
PHSUBD xmm1, xmm2/m128
RM V/V SSSE3 
Subtract 32-bit signed integers horizontally,
 pack to xmm1.

VEX.NDS.128.66.0F38.WIG 05 /r
VPHSUBW xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Subtract 16-bit signed integers horizontally,
 pack to xmm1.

VEX.NDS.128.66.0F38.WIG 06 /r
VPHSUBD xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Subtract 32-bit signed integers horizontally,
 pack to xmm1.

VEX.NDS.256.66.0F38.WIG 05 /r
VPHSUBW ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Subtract 16-bit signed integers horizontally,
 pack to ymm1.

VEX.NDS.256.66.0F38.WIG 06 /r
VPHSUBD ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Subtract 32-bit signed integers horizontally,
 pack to ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
(V)PHSUBW performs horizontal subtraction on each adjacent pair of 16-bit signed integers by subtracting the
most significant word from the least significant word of each pair in the source and destination operands, and packs
the signed 16-bit results to the destination operand (first operand). (V)PHSUBD performs horizontal subtraction on
each adjacent pair of 32-bit signed integers by subtracting the most significant doubleword from the least signifi-
cant doubleword of each pair, and packs the signed 32-bit result to the destination operand. When the source
operand is a 128-bit memory operand, the operand must be aligned on a 16-byte boundary or a general-protection
exception (#GP) will be generated.
Legacy SSE version: Both operands can be MMX registers. The second source operand can be an MMX register or
a 64-bit memory location.
128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the corresponding YMM destina-
tion register remain unchanged.
In 64-bit mode, use the REX prefix to access additional registers.
VEX.128 encoded version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the destination YMM register are
zeroed.
---------------------------------------------------------------------

114
PHSUBSW — Packed Horizontal Subtract and Saturate

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 38 07 /r 
PHSUBSW mm1, mm2/m64
RM V/V SSSE3 
Subtract 16-bit signed integer horizontally,
 pack saturated integers to mm1.

66 0F 38 07 /r
PHSUBSW xmm1, xmm2/m128
RM V/V SSSE3 
Subtract 16-bit signed integer horizontally,
 pack saturated integers to xmm1.

VEX.NDS.128.66.0F38.WIG 07 /r
VPHSUBSW xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Subtract 16-bit signed integer horizontally,
 pack saturated integers to xmm1.

VEX.NDS.256.66.0F38.WIG 07 /r
VPHSUBSW ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Subtract 16-bit signed integer horizontally,
 pack saturated integers to ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (r, w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
(V)PHSUBSW performs horizontal subtraction on each adjacent pair of 16-bit signed integers by subtracting the
most significant word from the least significant word of each pair in the source and destination operands. The
signed, saturated 16-bit results are packed to the destination operand (first operand). When the source operand is
a 128-bit memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception
(#GP) will be generated.
Legacy SSE version: Both operands can be MMX registers. The second source operand can be an MMX register or a
64-bit memory location.
128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the corresponding YMM destina-
tion register remain unchanged.
In 64-bit mode, use the REX prefix to access additional registers.
VEX.128 encoded version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the destination YMM register are
zeroed.
VEX.256 encoded version: The first source and destination operands are YMM registers. The second source
operand can be an YMM register or a 256-bit memory location.
Note: VEX.L must be 0, otherwise the instruction will #UD.
---------------------------------------------------------------------

116
PINSRB/PINSRD/PINSRQ — Insert Byte/Dword/Qword

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

66 0F 3A 20 /r ib 
PINSRB xmm1, r32/m8, imm8 
RMI V/V SSE4_1 
Insert a byte integer value from r32/m8 into
 xmm1 at the destination element in xmm1
 specified by imm8.

66 0F 3A 22 /r ib 
PINSRD xmm1, r/m32, imm8 
RMI V/V SSE4_1 
Insert a dword integer value from r/m32 into
 the xmm1 at the destination element
 specified by imm8.

66 REX.W 0F 3A 22 /r ib 
PINSRQ xmm1, r/m64, imm8 
RMI V/N. E. SSE4_1 
Insert a qword integer value from r/m64 into
 the xmm1 at the destination element
 specified by imm8.

VEX.NDS.128.66.0F3A.W0 20 /r ib 
VPINSRB xmm1, xmm2, r32/m8, imm8 
RVMI V/V AVX 
Merge a byte integer value from r32/m8 and
 rest from xmm2 into xmm1 at the byte offset
 in imm8.

VEX.NDS.128.66.0F3A.W0 22 /r ib 
VPINSRD xmm1, xmm2, r/m32, imm8 
RVMI V/V AVX 
Insert a dword integer value from r32/m32
 and rest from xmm2 into xmm1 at the dword
 offset in imm8.

VEX.NDS.128.66.0F3A.W1 22 /r ib 
VPINSRQ xmm1, xmm2, r/m64, imm8 
RVMI V/I AVX 
Insert a qword integer value from r64/m64
 and rest from xmm2 into xmm1 at the qword
 offset in imm8.

NOTES:
1. In 64-bit mode, VEX.W1 is ignored for VPINSRB (similar to legacy REX.W=1 prefix with PINSRB).

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RMI ModRM:reg (w) ModRM:r/m (r) imm8 NA
RVMI ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) imm8

Description
Copies a byte/dword/qword from the source operand (second operand) and inserts it in the destination operand
(first operand) at the location specified with the count operand (third operand). (The other elements in the desti-
nation register are left untouched.) The source operand can be a general-purpose register or a memory location.
(When the source operand is a general-purpose register, PINSRB copies the low byte of the register.) The destina-
tion operand is an XMM register. The count operand is an 8-bit immediate. When specifying a qword[dword, byte]
location in an an XMM register, the [2, 4] least-significant bit(s) of the count operand specify the location.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15, R8-15). Use of REX.W permits the use of 64 bit general purpose registers.
128-bit Legacy SSE version: Bits (VLMAX-1:128) of the corresponding YMM destination register remain
unchanged.
VEX.128 encoded version: Bits (VLMAX-1:128) of the destination YMM register are zeroed. VEX.L must be 0, other-
wise the instruction will #UD. Attempt to execute VPINSRQ in non-64-bit mode will cause #UD.
---------------------------------------------------------------------

118
PINSRW—Insert Word

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F C4 /r ib 
PINSRW mm, r32/m16, imm8
RMI V/V SSE 
Insert the low word from r32 or from m16
 into mm at the word position specified by
 imm8.

66 0F C4 /r ib
PINSRW xmm, r32/m16, imm8
RMI V/V SSE2 
Move the low word of r32 or from m16 into
 xmm at the word position specified by imm8.

VEX.NDS.128.66.0F.W0 C4 /r ib
VPINSRW xmm1, xmm2, r32/m16, imm8
RVMI V/V AVX 
Insert a word integer value from r32/m16
 and rest from xmm2 into xmm1 at the word
 offset in imm8.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.
2. In 64-bit mode, VEX.W1 is ignored for VPINSRW (similar to legacy REX.W=1 prefix in PINSRW).

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RMI ModRM:reg (w) ModRM:r/m (r) imm8 NA
RVMI ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) imm8

Description
Copies a word from the source operand (second operand) and inserts it in the destination operand (first operand)
at the location specified with the count operand (third operand). (The other words in the destination register are
left untouched.) The source operand can be a general-purpose register or a 16-bit memory location. (When the
source operand is a general-purpose register, the low word of the register is copied.) The destination operand can
be an MMX technology register or an XMM register. The count operand is an 8-bit immediate. When specifying a
word location in an MMX technology register, the 2 least-significant bits of the count operand specify the location;
for an XMM register, the 3 least-significant bits specify the location.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15, R8-15).
128-bit Legacy SSE version: Bits (VLMAX-1:128) of the corresponding YMM destination register remain
unchanged.
VEX.128 encoded version: Bits (VLMAX-1:128) of the destination YMM register are zeroed. VEX.L must be 0, other-
wise the instruction will #UD.
---------------------------------------------------------------------

120
PMADDUBSW — Multiply and Add Packed Signed and Unsigned Bytes

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F 38 04 /r 
PMADDUBSW mm1, mm2/m64
RM V/V SSSE3 
Multiply signed and unsigned bytes, add
 horizontal pair of signed words, pack
 saturated signed-words to mm1.

66 0F 38 04 /r
PMADDUBSW xmm1, xmm2/m128
RM V/V SSSE3 
Multiply signed and unsigned bytes, add
 horizontal pair of signed words, pack
 saturated signed-words to xmm1.

VEX.NDS.128.66.0F38.WIG 04 /r
VPMADDUBSW xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Multiply signed and unsigned bytes, add
 horizontal pair of signed words, pack
 saturated signed-words to xmm1.

VEX.NDS.256.66.0F38.WIG 04 /r
VPMADDUBSW ymm1, ymm2, ymm3/m256
RVM V/V AVX2
Multiply signed and unsigned bytes, add
 horizontal pair of signed words, pack
 saturated signed-words to ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
(V)PMADDUBSW multiplies vertically each unsigned byte of the destination operand (first operand) with the corre-
sponding signed byte of the source operand (second operand), producing intermediate signed 16-bit integers. Each
adjacent pair of signed words is added and the saturated result is packed to the destination operand. For example,
the lowest-order bytes (bits 7-0) in the source and destination operands are multiplied and the intermediate signed
word result is added with the corresponding intermediate result from the 2nd lowest-order bytes (bits 15-8) of the
operands; the sign-saturated result is stored in the lowest word of the destination register (15-0). The same oper-
ation is performed on the other pairs of adjacent bytes. Both operands can be MMX register or XMM registers. When
the source operand is a 128-bit memory operand, the operand must be aligned on a 16-byte boundary or a
general-protection exception (#GP) will be generated.
In 64-bit mode, use the REX prefix to access additional registers.
128-bit Legacy SSE version: Bits (VLMAX-1:128) of the corresponding YMM destination register remain
unchanged.
VEX.128 encoded version: Bits (VLMAX-1:128) of the destination YMM register are zeroed.
VEX.256 encoded version: The first source and destination operands are YMM registers. The second source
operand can be an YMM register or a 256-bit memory location.
Note: VEX.L must be 0, otherwise the instruction will #UD.
---------------------------------------------------------------------

122
PMADDWD—Multiply and Add Packed Integers

Opcode/ Op/ 64/32 bit CPUID Description
Instruction En Mode Feature 
               Support Flag 

0F F5 /r 
PMADDWD mm, mm/m64
RM V/V MMX 
Multiply the packed words in mm by the
 packed words in mm/m64, add adjacent
 doubleword results, and store in mm.

66 0F F5 /r
PMADDWD xmm1, xmm2/m128
RM V/V SSE2 
Multiply the packed word integers in xmm1 by
 the packed word integers in xmm2/m128, add
 adjacent doubleword results, and store in
 xmm1.

VEX.NDS.128.66.0F.WIG F5 /r
VPMADDWD xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Multiply the packed word integers in xmm2 by
 the packed word integers in xmm3/m128, add
 adjacent doubleword results, and store in
 xmm1.

VEX.NDS.256.66.0F.WIG F5 /r
VPMADDWD ymm1, ymm2, ymm3/m256
RVM V/V AVX2 
Multiply the packed word integers in ymm2 by
 the packed word integers in ymm3/m256, add
 adjacent doubleword results, and store in
 ymm1.

NOTES:
1. See note in Section 2.4, “Instruction Exception Specification” in the Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 2A and Section 22.25.3, “Exception Conditions of Legacy SIMD Instructions Operating on MMX Registers” in the Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 3A.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Multiplies the individual signed words of the destination operand (first operand) by the corresponding signed words
of the source operand (second operand), producing temporary signed, doubleword results. The adjacent double-
word results are then summed and stored in the destination operand. For example, the corresponding low-order
words (15-0) and (31-16) in the source and destination operands are multiplied by one another and the double-
word results are added together and stored in the low doubleword of the destination register (31-0). The same
operation is performed on the other pairs of adjacent words. (Figure 4-7 shows this operation when using 64-bit
operands).
The (V)PMADDWD instruction wraps around only in one situation: when the 2 pairs of words being operated on in
a group are all 8000H. In this case, the result wraps around to 80000000H.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
Legacy SSE version: The first source and destination operands are MMX registers. The second source operand is an
MMX register or a 64-bit memory location.
128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the corresponding YMM destina-
tion register remain unchanged.
VEX.128 encoded version: The first source and destination operands are XMM registers. The second source
operand is an XMM register or a 128-bit memory location. Bits (VLMAX-1:128) of the destination YMM register are
zeroed.
---------------------------------------------------------------------

