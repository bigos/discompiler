ADC—Add with Carry

Opcode Instruction Op/ 64-bit Compat/ Description
                   En  Mode   Leg Mode

14 ib 
ADC AL, imm8 
I Valid Valid 
Add with carry imm8 to AL.

15 iw 
ADC AX, imm16 
I Valid Valid 
Add with carry imm16 to AX.

15 id 
ADC EAX, imm32 
I Valid Valid 
Add with carry imm32 to EAX.

REX.W + 15 id 
ADC RAX, imm32 
I Valid N.E. 
Add with carry imm32 sign extended to 64-
 bits to RAX.

80 /2 ib 
ADC r/m8, imm8 
MI Valid Valid 
Add with carry imm8 to r/m8.

REX + 80 /2 ib 
ADC r/m8 , imm8 
MI Valid N.E. 
Add with carry imm8 to r/m8.

81 /2 iw 
ADC r/m16, imm16 
MI Valid Valid 
Add with carry imm16 to r/m16.

81 /2 id 
ADC r/m32, imm32 
MI Valid Valid 
Add with CF imm32 to r/m32.

REX.W + 81 /2 id 
ADC r/m64, imm32 
MI Valid N.E. 
Add with CF imm32 sign extended to 64-bits
 to r/m64.

83 /2 ib 
ADC r/m16, imm8 
MI Valid Valid 
Add with CF sign-extended imm8 to r/m16.

83 /2 ib 
ADC r/m32, imm8 
MI Valid Valid 
Add with CF sign-extended imm8 into r/m32.

REX.W + 83 /2 ib 
ADC r/m64, imm8 
MI Valid N.E. 
Add with CF sign-extended imm8 into r/m64.

10 /r 
ADC r/m8, r8 
MR Valid Valid 
Add with carry byte register to r/m8.

REX + 10 /r 
ADC r/m8*, r8* 
MR Valid N.E. 
Add with carry byte register to r/m64.

11 /r 
ADC r/m16, r16 
MR Valid Valid 
Add with carry r16 to r/m16.

11 /r 
ADC r/m32, r32 
MR Valid Valid 
Add with CF r32 to r/m32.

REX.W + 11 /r 
ADC r/m64, r64 
MR Valid N.E. 
Add with CF r64 to r/m64.

12 /r 
ADC r8, r/m8 
RM Valid Valid 
Add with carry r/m8 to byte register.

REX + 12 /r 
ADC r8*, r/m8* 
RM Valid N.E. 
Add with carry r/m64 to byte register.

13 /r 
ADC r16, r/m16 
RM Valid Valid 
Add with carry r/m16 to r16.

13 /r 
ADC r32, r/m32 
RM Valid Valid 
Add with CF r/m32 to r32.

REX.W + 13 /r 
ADC r64, r/m64 
RM Valid N.E. 
Add with CF r/m64 to r64.

NOTES:
*In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
MR ModRM:r/m (r, w) ModRM:reg (r) NA NA
MI ModRM:r/m (r, w) imm8 NA NA
I AL/AX/EAX/RAX imm8 NA NA

Description
Adds the destination operand (first operand), the source operand (second operand), and the carry (CF) flag and
stores the result in the destination operand. The destination operand can be a register or a memory location; the
source operand can be an immediate, a register, or a memory location. (However, two memory operands cannot be
used in one instruction.) The state of the CF flag represents a carry from a previous addition. When an immediate
value is used as an operand, it is sign-extended to the length of the destination operand format.
3-24 Vol. 2A
ADC—Add with CarryINSTRUCTION SET REFERENCE, A-M
The ADC instruction does not distinguish between signed or unsigned operands. Instead, the processor evaluates
the result for both data types and sets the OF and CF flags to indicate a carry in the signed or unsigned result,
respectively. The SF flag indicates the sign of the signed result.
The ADC instruction is usually executed as part of a multibyte or multiword addition in which an ADD instruction is
followed by an ADC instruction.
This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.
In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits
access to additional registers (R8-R15). Using a REX prefix in the form of REX.W promotes operation to 64 bits. See
the summary chart at the beginning of this section for encoding data and limits.

Operation
DEST ← DEST + SRC + CF;

Flags Affected
The OF, SF, ZF, AF, CF, and PF flags are set according to the result.
---------------------------------------------------------------------

ADD—Add
Opcode Instruction Op/ 64-bit Compat/ Description
                   En  Mode   Leg Mode

04 ib 
ADD AL, imm8 
I Valid Valid 
Add imm8 to AL.

05 iw 
ADD AX, imm16 
I Valid Valid 
Add imm16 to AX.

05 id 
ADD EAX, imm32 
I Valid Valid 
Add imm32 to EAX.

REX.W + 05 id 
ADD RAX, imm32 
I Valid N.E. 
Add imm32 sign-extended to 64-bits to RAX.

80 /0 ib 
ADD r/m8, imm8 
MI Valid Valid 
Add imm8 to r/m8.

REX + 80 /0 ib 
ADD r/m8*, imm8 
MI Valid N.E. 
Add sign-extended imm8 to r/m64.

81 /0 iw 
ADD r/m16, imm16 
MI Valid Valid 
Add imm16 to r/m16.

81 /0 id 
ADD r/m32, imm32 
MI Valid Valid 
Add imm32 to r/m32.

REX.W + 81 /0 id 
ADD r/m64, imm32 
MI Valid N.E. 
Add imm32 sign-extended to 64-bits to
 r/m64.

83 /0 ib 
ADD r/m16, imm8 
MI Valid Valid 
Add sign-extended imm8 to r/m16.

83 /0 ib 
ADD r/m32, imm8 
MI Valid Valid 
Add sign-extended imm8 to r/m32.

REX.W + 83 /0 ib 
ADD r/m64, imm8 
MI Valid N.E. 
Add sign-extended imm8 to r/m64.

00 /r 
ADD r/m8, r8 
MR Valid Valid 
Add r8 to r/m8.

REX + 00 /r 
ADD r/m8 , r8 
MR Valid N.E. 
Add r8 to r/m8.

01 /r 
ADD r/m16, r16
MR Valid Valid 
Add r16 to r/m16.

01 /r 
ADD r/m32, r32 
MR Valid Valid 
Add r32 to r/m32.

REX.W + 01 /r 
ADD r/m64, r64 
MR Valid N.E. 
Add r64 to r/m64.

02 /r 
ADD r8, r/m8 
RM Valid Valid 
Add r/m8 to r8.

REX + 02 /r
ADD r8 , r/m8
RM Valid N.E. 
Add r/m8 to r8.

03 /r 
ADD r16, r/m16 
RM Valid Valid 
Add r/m16 to r16.

03 /r 
ADD r32, r/m32 
RM Valid Valid 
Add r/m32 to r32.

REX.W + 03 /r 
ADD r64, r/m64 
RM Valid N.E. 
Add r/m64 to r64.

NOTES:
*In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
MR ModRM:r/m (r, w) ModRM:reg (r) NA NA
MI ModRM:r/m (r, w) imm8 NA NA
I AL/AX/EAX/RAX imm8 NA NA

Description
Adds the destination operand (first operand) and the source operand (second operand) and then stores the result
in the destination operand. The destination operand can be a register or a memory location; the source operand
can be an immediate, a register, or a memory location. (However, two memory operands cannot be used in one
instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination
operand format.
The ADD instruction performs integer addition. It evaluates the result for both signed and unsigned integer oper-
ands and sets the OF and CF flags to indicate a carry (overflow) in the signed or unsigned result, respectively. The
SF flag indicates the sign of the signed result.
This instruction can be used with a LOCK prefix to allow the instruction to be executed atomically.
In 64-bit mode, the instruction’s default operation size is 32 bits. Using a REX prefix in the form of REX.R permits
access to additional registers (R8-R15). Using a REX a REX prefix in the form of REX.W promotes operation to 64
bits. See the summary chart at the beginning of this section for encoding data and limits.

Operation
DEST ← DEST + SRC;

Flags Affected
The OF, SF, ZF, AF, CF, and PF flags are set according to the result.
---------------------------------------------------------------------

ADDPD—Add Packed Double-Precision Floating-Point Values

Opcode/     Op/ 64/32-bit CPUID Description
Instruction En  Mode 
                          Feature 
                          Flag 
66 0F 58 /r 
ADDPD xmm1, xmm2/m128
RM V/V SSE2 
Add packed double-precision floating-point
 values from xmm2/m128 to xmm1.

VEX.NDS.128.66.0F.WIG 58 /r
VADDPD xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Add packed double-precision floating-point
 values from xmm3/mem to xmm2 and stores
 result in xmm1.

VEX.NDS.256.66.0F.WIG 58 /r
VADDPD ymm1, ymm2, ymm3/m256
RVM V/V AVX 
Add packed double-precision floating-point
 values from ymm3/mem to ymm2 and stores
 result in ymm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Performs a SIMD add of the two packed double-precision floating-point values from the source operand (second
operand) and the destination operand (first operand), and stores the packed double-precision floating-point results
in the destination operand.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The desti-
nation is not distinct from the first source XMM register and the upper bits (VLMAX-1:128) of the corresponding
YMM register destination are unmodified. See Chapter 11 in the Intel® 64 and IA-32 Architectures Software Devel-
oper’s Manual, Volume 1, for an overview of SIMD double-precision floating-point operation.
VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination
operand is an XMM register. The upper bits (VLMAX-1:128) of the corresponding YMM register destination are
zeroed.
VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM
register or a 256-bit memory location. The destination operand is a YMM register.

Operation
ADDPD (128-bit Legacy SSE version)
DEST[63:0] ← DEST[63:0] + SRC[63:0];
DEST[127:64] ← DEST[127:64] + SRC[127:64];
DEST[VLMAX-1:128] (Unmodified)
VADDPD (VEX.128 encoded version)
DEST[63:0]  SRC1[63:0] + SRC2[63:0]
DEST[127:64]  SRC1[127:64] + SRC2[127:64]
DEST[VLMAX-1:128]  0
VADDPD (VEX.256 encoded version)
DEST[63:0]  SRC1[63:0] + SRC2[63:0]
DEST[127:64]  SRC1[127:64] + SRC2[127:64]
DEST[191:128]  SRC1[191:128] + SRC2[191:128]
DEST[255:192]  SRC1[255:192] + SRC2[255:192]
---------------------------------------------------------------------

ADDPS—Add Packed Single-Precision Floating-Point Values

Opcode/     Op/ 64/32-bit CPUID Description
Instruction En Mode 
                          Feature 
                          Flag 

0F 58 /r 
ADDPS xmm1, xmm2/m128
RM V/V SSE 
Add packed single-precision floating-point
 values from xmm2/m128 to xmm1 and stores
 result in xmm1.

VEX.NDS.128.0F.WIG 58 /r
VADDPS xmm1,xmm2, xmm3/m128
RVM V/V AVX 
Add packed single-precision floating-point
 values from xmm3/mem to xmm2 and stores
 result in xmm1.

VEX.NDS.256.0F.WIG 58 /r
VADDPS ymm1, ymm2, ymm3/m256
RVM V/V AVX 
Add packed single-precision floating-point
 values from ymm3/mem to ymm2 and stores
 result in ymm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r)) NA

Description
Performs a SIMD add of the four packed single-precision floating-point values from the source operand (second
operand) and the destination operand (first operand), and stores the packed single-precision floating-point results
in the destination operand.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The desti-
nation is not distinct from the first source XMM register and the upper bits (VLMAX-1:128) of the corresponding
YMM register destination are unmodified. See Chapter 10 in the Intel® 64 and IA-32 Architectures Software Devel-
oper’s Manual, Volume 1, for an overview of SIMD single-precision floating-point operation.
VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination
operand is an XMM register. The upper bits (VLMAX-1:128) of the corresponding YMM register destination are
zeroed.
VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM
register or a 256-bit memory location. The destination operand is a YMM register.

Operation
ADDPS (128-bit Legacy SSE version)
DEST[31:0] ← DEST[31:0] + SRC[31:0];
DEST[63:32] ← DEST[63:32] + SRC[63:32];
DEST[95:64] ← DEST[95:64] + SRC[95:64];
DEST[127:96] ← DEST[127:96] + SRC[127:96];
DEST[VLMAX-1:128] (Unmodified)
VADDPS (VEX.128 encoded version)
DEST[31:0]  SRC1[31:0] + SRC2[31:0]
DEST[63:32]  SRC1[63:32] + SRC2[63:32]
DEST[95:64]  SRC1[95:64] + SRC2[95:64]
DEST[127:96]  SRC1[127:96] + SRC2[127:96]
DEST[VLMAX-1:128]  0
VADDPS (VEX.256 encoded version)
DEST[31:0]  SRC1[31:0] + SRC2[31:0]
DEST[63:32]  SRC1[63:32] + SRC2[63:32]
DEST[95:64]  SRC1[95:64] + SRC2[95:64]
DEST[127:96]  SRC1[127:96] + SRC2[127:96]
DEST[159:128]  SRC1[159:128] + SRC2[159:128]
DEST[191:160] SRC1[191:160] + SRC2[191:160]
DEST[223:192]  SRC1[223:192] + SRC2[223:192]
DEST[255:224]  SRC1[255:224] + SRC2[255:224]
---------------------------------------------------------------------

ADDSD—Add Scalar Double-Precision Floating-Point Values
Opcode/     Op/ 64/32-bit CPUID Description
Instruction En  Mode 
                          Feature 
                          Flag 

F2 0F 58 /r 
ADDSD xmm1, xmm2/m64
RM V/V SSE2 
Add the low double-precision floating-point
 value from xmm2/m64 to xmm1.

VEX.NDS.LIG.F2.0F.WIG 58 /r
VADDSD xmm1, xmm2, xmm3/m64
RVM V/V AVX 
Add the low double-precision floating-point
 value from xmm3/mem to xmm2 and store
 the result in xmm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r)) NA

Description
Adds the low double-precision floating-point values from the source operand (second operand) and the destination
operand (first operand), and stores the double-precision floating-point result in the destination operand.
The source operand can be an XMM register or a 64-bit memory location. The destination operand is an XMM
register. See Chapter 11 in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for an
overview of a scalar double-precision floating-point operation.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: Bits (VLMAX-1:64) of the corresponding YMM destination register remain unchanged.
VEX.128 encoded version: Bits (127:64) of the XMM register destination are copied from corresponding bits in the
first source operand. Bits (VLMAX-1:128) of the destination YMM register are zeroed.

Operation
ADDSD (128-bit Legacy SSE version)
DEST[63:0]  DEST[63:0] + SRC[63:0]
DEST[VLMAX-1:64] (Unmodified)
VADDSD (VEX.128 encoded version)
DEST[63:0]  SRC1[63:0] + SRC2[63:0]
DEST[127:64]  SRC1[127:64]
DEST[VLMAX-1:128]  0
---------------------------------------------------------------------

ADDSS—Add Scalar Single-Precision Floating-Point Values
Opcode/     Op/ 64/32-bit CPUID Description
Instruction En  Mode 
                          Feature 
                          Flag 

F3 0F 58 /r 
ADDSS xmm1, xmm2/m32
RM V/V SSE 
Add the low single-precision floating-point
 value from xmm2/m32 to xmm1.

VEX.NDS.LIG.F3.0F.WIG 58 /r
VADDSS xmm1,xmm2, xmm3/m32
RVM V/V AVX 
Add the low single-precision floating-point
 value from xmm3/mem to xmm2 and store
 the result in xmm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Adds the low single-precision floating-point values from the source operand (second operand) and the destination
operand (first operand), and stores the single-precision floating-point result in the destination operand.
The source operand can be an XMM register or a 32-bit memory location. The destination operand is an XMM
register. See Chapter 10 in the Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for an
overview of a scalar single-precision floating-point operation.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: Bits (VLMAX-1:32) of the corresponding YMM destination register remain unchanged.
VEX.128 encoded version: Bits (127:32) of the XMM register destination are copied from corresponding bits in the
first source operand. Bits (VLMAX-1:128) of the destination YMM register are zeroed.

Operation
ADDSS DEST, SRC (128-bit Legacy SSE version)
DEST[31:0]  DEST[31:0] + SRC[31:0];
DEST[VLMAX-1:32] (Unmodified)
VADDSS DEST, SRC1, SRC2 (VEX.128 encoded version)
DEST[31:0]  SRC1[31:0] + SRC2[31:0]
DEST[127:32]  SRC1[127:32]
DEST[VLMAX-1:128]  0
---------------------------------------------------------------------

ADDSUBPD—Packed Double-FP Add/Subtract
Opcode/ Op/ 64/32-bit CPUID Description
Instruction En Mode 
               Feature 
               Flag 

66 0F D0 /r 
ADDSUBPD xmm1, xmm2/m128
RM V/V SSE3 
Add/subtract double-precision floating-point
 values from xmm2/m128 to xmm1.

VEX.NDS.128.66.0F.WIG D0 /r
VADDSUBPD xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Add/subtract packed double-precision
 floating-point values from xmm3/mem to
 xmm2 and stores result in xmm1.

VEX.NDS.256.66.0F.WIG D0 /r
VADDSUBPD ymm1, ymm2, ymm3/m256
RVM V/V AVX 
Add / subtract packed double-precision
 floating-point values from ymm3/mem to
 ymm2 and stores result in ymm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Adds odd-numbered double-precision floating-point values of the first source operand (second operand) with the
corresponding double-precision floating-point values from the second source operand (third operand); stores the
result in the odd-numbered values of the destination operand (first operand). Subtracts the even-numbered
double-precision floating-point values from the second source operand from the corresponding double-precision
floating values in the first source operand; stores the result into the even-numbered values of the destination
operand.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The desti-
nation is not distinct from the first source XMM register and the upper bits (VLMAX-1:128) of the corresponding
YMM register destination are unmodified. See Figure 3-3.
VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination
operand is an XMM register. The upper bits (VLMAX-1:128) of the corresponding YMM register destination are
zeroed.
VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM
register or a 256-bit memory location. The destination operand is a YMM register.

Figure 3-3. ADDSUBPD—Packed Double-FP Add/Subtract

Operation
ADDSUBPD (128-bit Legacy SSE version)
DEST[63:0]  DEST[63:0] - SRC[63:0]
DEST[127:64]  DEST[127:64] + SRC[127:64]
DEST[VLMAX-1:128] (Unmodified)
VADDSUBPD (VEX.128 encoded version)
DEST[63:0]  SRC1[63:0] - SRC2[63:0]
DEST[127:64]  SRC1[127:64] + SRC2[127:64]
DEST[VLMAX-1:128]  0
VADDSUBPD (VEX.256 encoded version)
DEST[63:0]  SRC1[63:0] - SRC2[63:0]
DEST[127:64]  SRC1[127:64] + SRC2[127:64]
DEST[191:128]  SRC1[191:128] - SRC2[191:128]
DEST[255:192]  SRC1[255:192] + SRC2[255:192]
---------------------------------------------------------------------

ADDSUBPS—Packed Single-FP Add/Subtract

Opcode/     Op/ 64/32-bit CPUID Description
Instruction En  Mode 
                          Feature 
                          Flag 

F2 0F D0 /r 
ADDSUBPS xmm1, xmm2/m128
RM V/V SSE3 
Add/subtract single-precision floating-point
 values from xmm2/m128 to xmm1.

VEX.NDS.128.F2.0F.WIG D0 /r
VADDSUBPS xmm1, xmm2, xmm3/m128
RVM V/V AVX 
Add/subtract single-precision floating-point
 values from xmm3/mem to xmm2 and stores
 result in xmm1.

VEX.NDS.256.F2.0F.WIG D0 /r
VADDSUBPS ymm1, ymm2, ymm3/m256
RVM V/V AVX 
Add / subtract single-precision floating-point
 values from ymm3/mem to ymm2 and stores
 result in ymm1.

Instruction Operand Encoding
Op/En Operand 1 Operand 2 Operand 3 Operand 4
RM ModRM:reg (r, w) ModRM:r/m (r) NA NA
RVM ModRM:reg (w) VEX.vvvv (r) ModRM:r/m (r) NA

Description
Adds odd-numbered single-precision floating-point values of the first source operand (second operand) with the
corresponding single-precision floating-point values from the second source operand (third operand); stores the
result in the odd-numbered values of the destination operand (first operand). Subtracts the even-numbered
single-precision floating-point values from the second source operand from the corresponding single-precision
floating values in the first source operand; stores the result into the even-numbered values of the destination
operand.
In 64-bit mode, using a REX prefix in the form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).
128-bit Legacy SSE version: The second source can be an XMM register or an 128-bit memory location. The desti-
nation is not distinct from the first source XMM register and the upper bits (VLMAX-1:128) of the corresponding
YMM register destination are unmodified. See Figure 3-4.
VEX.128 encoded version: the first source operand is an XMM register or 128-bit memory location. The destination
operand is an XMM register. The upper bits (VLMAX-1:128) of the corresponding YMM register destination are
zeroed.
VEX.256 encoded version: The first source operand is a YMM register. The second source operand can be a YMM
register or a 256-bit memory location. The destination operand is a YMM register.
Figure 3-4. ADDSUBPS—Packed Single-FP Add/Subtract

Operation
ADDSUBPS (128-bit Legacy SSE version)
DEST[31:0]  DEST[31:0] - SRC[31:0]
DEST[63:32]  DEST[63:32] + SRC[63:32]
DEST[95:64]  DEST[95:64] - SRC[95:64]
DEST[127:96]  DEST[127:96] + SRC[127:96]
DEST[VLMAX-1:128] (Unmodified)
VADDSUBPS (VEX.128 encoded version)
DEST[31:0]  SRC1[31:0] - SRC2[31:0]
DEST[63:32]  SRC1[63:32] + SRC2[63:32]
DEST[95:64]  SRC1[95:64] - SRC2[95:64]
DEST[127:96]  SRC1[127:96] + SRC2[127:96]
DEST[VLMAX-1:128]  0
VADDSUBPS (VEX.256 encoded version)
DEST[31:0]  SRC1[31:0] - SRC2[31:0]
DEST[63:32]  SRC1[63:32] + SRC2[63:32]
DEST[95:64]  SRC1[95:64] - SRC2[95:64]
DEST[127:96]  SRC1[127:96] + SRC2[127:96]
DEST[159:128]  SRC1[159:128] - SRC2[159:128]
DEST[191:160] SRC1[191:160] + SRC2[191:160]
DEST[223:192]  SRC1[223:192] - SRC2[223:192]
DEST[255:224]  SRC1[255:224] + SRC2[255:224].
Intel C/C++ Compiler Intrinsic Equivalent
---------------------------------------------------------------------


